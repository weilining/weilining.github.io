<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Ln&#39;s Blog</title>
  
  <subtitle>有朋自远方来，不亦乐乎</subtitle>
  <link href="https://weilining.github.io/atom.xml" rel="self"/>
  
  <link href="https://weilining.github.io/"/>
  <updated>2021-12-02T17:41:59.000Z</updated>
  <id>https://weilining.github.io/</id>
  
  <author>
    <name>Lining Wei</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>最有效使用 Pycharm 第一次运行 Python</title>
    <link href="https://weilining.github.io/360.html"/>
    <id>https://weilining.github.io/360.html</id>
    <published>2021-12-02T17:41:59.000Z</published>
    <updated>2021-12-02T17:41:59.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="使用-Pycharm-运行-Python"><a href="#使用-Pycharm-运行-Python" class="headerlink" title="使用 Pycharm 运行 Python"></a>使用 Pycharm 运行 Python</h2><h3 id="macOS下载Pycharm"><a href="#macOS下载Pycharm" class="headerlink" title="macOS下载Pycharm"></a>macOS下载Pycharm</h3><p><span class="exturl" data-url="aHR0cHM6Ly93d3cuamV0YnJhaW5zLmNvbS9weWNoYXJtL2Rvd25sb2FkLyNzZWN0aW9uPW1hYw==">Download PyCharm: Python IDE for Professional Developers by JetBrains<i class="fa fa-external-link-alt"></i></span></p><h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pycharm professional 2021.2.2</span><br><span class="line">macOS 12.0.1</span><br></pre></td></tr></table></figure><h3 id="设置中文"><a href="#设置中文" class="headerlink" title="设置中文"></a>设置中文</h3><p><code>Plogins</code>里安装好<code>Chinese</code>插件，然后退出软件，点击<code>restart</code></p><p><img data-src="/360/image-20211203014553586.png" alt="image-20211203014553586" loading="lazy"></p><p><img data-src="/360/image-20211203014759152.png" alt="image-20211203014759152" loading="lazy"></p><h3 id="虚拟环境创建项目"><a href="#虚拟环境创建项目" class="headerlink" title="虚拟环境创建项目"></a>虚拟环境创建项目</h3><p><img data-src="/360/image-20211203015452231.png" alt="image-20211203015452231" loading="lazy"></p><h3 id="运行代码"><a href="#运行代码" class="headerlink" title="运行代码"></a>运行代码</h3><p><img data-src="/360/image-20211203015646646.png" alt="image-20211203015646646" loading="lazy"></p>]]></content>
    
    
    <summary type="html">默认</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>最有效小初高人教版电子教材下载</title>
    <link href="https://weilining.github.io/359.html"/>
    <id>https://weilining.github.io/359.html</id>
    <published>2021-12-02T17:34:11.000Z</published>
    <updated>2021-12-02T17:34:11.000Z</updated>
    
    <content type="html"><![CDATA[<p>现在七个文件夹，合计 9.03 GB ，共558套书籍打包链接</p><p>链接:<span class="exturl" data-url="aHR0cHM6Ly9wYW4uYmFpZHUuY29tL3MvMXpmZEYwUFFpMUJIOVEtbTY2UDJMSVE=">https://pan.baidu.com/s/1zfdF0PQi1BH9Q-m66P2LIQ<i class="fa fa-external-link-alt"></i></span> 密码:lz91</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><span class="exturl" data-url="aHR0cHM6Ly9ob3N0bG9jLmNvbS9mb3J1bS5waHA/bW9kPXZpZXd0aHJlYWQmdGlkPTY0Mjg3NiZoaWdobGlnaHQ9JUU2JTk1JTk5JUU2JTlEJTkw">全套公开人教版教材书(pep)百度云链接+爬虫源码(更新9.03GB)-美国VPS综合讨论-全球主机交流论坛 - Powered by Discuz! (hostloc.com)<i class="fa fa-external-link-alt"></i></span></p><p> <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0xpYW9HdW9ZaW4vcGVwU3BpZGVy">LiaoGuoYin&#x2F;pepSpider: A Python script that crawls public ‘pep-book’ images, then converts into PDFs. (github.com)<i class="fa fa-external-link-alt"></i></span></p>]]></content>
    
    
    <summary type="html">默认</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>有这两大神器后，剪视频和音频像玩似的……</title>
    <link href="https://weilining.github.io/358.html"/>
    <id>https://weilining.github.io/358.html</id>
    <published>2021-11-25T04:38:26.000Z</published>
    <updated>2021-11-25T04:38:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近尝试剪电影片段，做像MV的短视频，最终呈现的效果还比较满意，符合之前的预期。这是第一次做视频，想分享一下在这个过程中get到的视频和音频剪辑的两大神器，毫不夸张，有这两个神器在手，视频和音频想怎么剪就怎么剪，关键是，速度还超级快</p><ul><li>电脑和软件：MacBook Pro、Final Cut Pro；</li><li>两个神器：ffmpeg、spleeter</li></ul><p>废话不多说，直接上干货</p><h2 id="一、视频剪辑神器——ffmpeg"><a href="#一、视频剪辑神器——ffmpeg" class="headerlink" title="一、视频剪辑神器——ffmpeg"></a>一、视频剪辑神器——ffmpeg</h2><p>ffmpeg是一个开源程序，在mac电脑终端搭配命令行使用，可以下载视频、转换视频格式、剪切视频片段、分离视频和音频、加水印、截图等，速度之快，画质之优，感天动地</p><p>作为看不懂火星文的程序小白，下载ffmpeg的过程中踩过不少坑，过滤掉这些山路十八弯的坑，分享一下简单直接的下载过程：</p><p><strong>1、下载Homebrew</strong></p><p>Homebrew是Mac OS平台下软件包管理工具，有安装、卸载、更新、查看、搜索软件包的功能，后续下载ffmpeg需要用到该工具</p><p>打开Mac电脑终端，复制以下代码，再按回车键</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/bin/zsh -c &quot;$(curl -fsSL https://gitee.com/cunkai/HomebrewCN/raw/master/Homebrew.sh)&quot;</span><br></pre></td></tr></table></figure><p>当最后显示“安装完成”的提示时，说明安装成功；</p><p>但接下来输入下载ffmpeg的代码</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install ffmpeg</span><br></pre></td></tr></table></figure><p>会提示以下代码</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew : command not found</span><br></pre></td></tr></table></figure><p>并且前面有一句提醒</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Warning: /usr/local/bin isnotin your PATH.</span><br></pre></td></tr></table></figure><p><strong>出现这个问题的原因是没有配置好环境变量</strong></p><p>我的解决办法是，终端打开.bash_profile文件，在文件里面直接添加该路径；要提前说明一下，我已经不记得从哪篇文章看到的这个方法，现在回溯历史记录好久也没找到，但看其他的文章，几乎都是在命令行里添加的路径，感觉这个方法会更靠谱一些；两种方法都介绍一下</p><p><strong>1）先说说我解决的方法</strong></p><p>终端输入打开.bash_profile文件的代码</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">open ~/.bash_profile -e</span><br></pre></td></tr></table></figure><p>然后在打开的文件中添加路径，保存之后，再关闭文件；现在我的文件里的内容是这样的</p><p><img data-src="/357-1/v2-325f4f23322515dc29c8b12ddd390fd9_r.jpg" alt="img" loading="lazy"></p><p><strong>2）网上普遍的方法是在终端添加路径</strong></p><p>终端输入以下代码，每输入一行都要按一次回车键</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo vim .bash_profile</span><br><span class="line">export PATH=/usr/local/bin:$PATH</span><br><span class="line">source .bash_profile</span><br></pre></td></tr></table></figure><p>关于配置环境变量的问题，可以参考这位大神分享的文章</p><p><span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vemR6ODIwNy9wL21hYy1icmV3LWluc3RhbGwuaHRtbA==">Mac Brew 安装及配置，解决多种错误问题的方法www.cnblogs.com/zdz8207/p/mac-brew-install.html<i class="fa fa-external-link-alt"></i></span></p><p>环境变量配置成功后，更新一下Homebrew的版本，代码如下</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew update</span><br></pre></td></tr></table></figure><p>关于Homebrew的安装，我参考的是这篇文章，在此感谢大神的分享</p><p><a href="https://zhuanlan.zhihu.com/p/111014448">金牛肖马：Homebrew国内如何自动安装（国内地址）3392 赞同 · 906 评论文章<img data-src="/357-1/v2-c40d2ef7e08afbb2750f2c5b4b45c923_180x120.jpg" alt="img" loading="lazy"></a></p><p><strong>2、安装ffmpeg</strong></p><p>在Mac终端复制以下代码，按回车键</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install ffmpeg --HEAD</span><br></pre></td></tr></table></figure><p>--HEAD指下载最新版本的ffmpeg</p><p>理论上可以不加--HEAD，但我没加的时候，ffmpeg没有下载成功，不知什么原因</p><p><strong>3、ffmpeg的使用</strong></p><p>ffmpeg的功能实在太强大了！！！不得不再感叹一次</p><p>这里就说说我用到的几个功能</p><p><strong>1）剪切视频片段</strong></p><p>用ffmpeg剪视频简直像玩似的，想怎么剪就怎么剪</p><p>代码是</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i 输入视频地址/123.mp4 -ss 00:43:20.0 -c copy -t 00:00:30.0 输出视频地址/1.mp4</span><br></pre></td></tr></table></figure><p><strong>解释一下各命令</strong></p><ul><li>- i 设定输入流；</li><li>-ss 开始时间</li><li>-c copy 直接复制，不经过重新编码</li><li>-t 切多少时间</li></ul><p><strong>需要注意的是</strong></p><ul><li>该代码中视频的<strong>名字不能是中文</strong></li><li>时间戳00:43:20.0表示43分20秒，若时间是1小时20分5秒，则时间戳为01:20:05.0；后面的“.0”也可省去</li><li>-t 后面是剪切多长的时间，比如上面的代码中，意思是从该视频的43分20秒开始剪30秒的视频</li><li>视频地址是该视频在电脑的详细路径，可通过右击视频，打开“显示简介”，“位置”的内容即为该视频的地址</li></ul><p><strong>2）分离音频</strong></p><p>如果不需要获取音频文件，直接用FCP中的分离音频功能即可；</p><p>但如果想要获取音频文件，进一步分离人声和环境音，可以用ffmpeg</p><p>代码是</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i 输入视频地址/1.mp4 -vn 输出音频地址/1.mp3</span><br></pre></td></tr></table></figure><p>-vn 不处理视频；</p><p><strong>3）分离视频</strong></p><p>还没用过这个功能，但和分离音频类似，所以就一起说下吧</p><p>代码是</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i 输入视频地址/1.mp4 -an 输出视频地址/2.mp4</span><br></pre></td></tr></table></figure><p>-an 不处理音频</p><p><strong>4）转换视频格式</strong></p><p>从网上下载的视频常常会因为格式不对无法导入FCP，因此需要转换格式，用ffmpeg的显著优势当然还是——速度快！</p><p>代码是</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i 输入视频地址/1.flv -vcodec h264 输出视频地址/1.mp4</span><br></pre></td></tr></table></figure><ul><li>- vcodec 设定视频编码器，未设定则使用与输入视频相同的编解码器</li><li>h264是一种常见的视频编码格式，视频和音频都需要经过编码，才能保存为文件，不同的编码格式和压缩率，会导致文件大小和清晰度的差异</li></ul><p>FCP通常导入的视频格式为h264的mov或mp4格式，我是转成mp4格式导入</p><p><strong>5）下载视频</strong></p><p>其实最初入手ffmpeg，就是因为看了一位大神分享下载视频的方法，对比了一下，觉得ffmpeg最牛掰，如果有这个工具，那网上视频不是任我下载，我干嘛还要充值VIP，不过后来才知道，是我太天真</p><p>大神文章地址如下，如何用ffmpeg下载网页视频，里面介绍的很清楚，亲测有效，这里就不再赘述</p><p><a href="https://zhuanlan.zhihu.com/p/142349349">黑暗中的已知点：下载网页视频的4种方法 (附教程) ，你值得收藏2600 赞同 · 308 评论文章<img data-src="/357-1/v2-ee1f6101d0bf1083bf6df1876a4940ee_180x120.jpg" alt="img" loading="lazy"></a></p><p>说明一下，从网页元素获取视频下载地址，如果下载地址前缀不是blob:https:&#x2F;&#x2F;，那么几乎都可以下载</p><p>但是优爱腾等视频网站的视频，无论网络版还是移动版，下载地址都有这样的前缀，无法用ffmpeg下载，期待大神们新的破解文</p><h2 id="二、音频分离工具——spleeter"><a href="#二、音频分离工具——spleeter" class="headerlink" title="二、音频分离工具——spleeter"></a>二、音频分离工具——spleeter</h2><p>终于要说说spleeter了，我的心头好</p><p>在做视频的时候，有时想要分离音频的环境音和人声，让人声可以更清楚一些，这里就可以用spleeter实现</p><p>当然，这样分离人声和环境音，也可以轻轻松松得到一首音乐的伴奏呢，速度之快只会让你惊喜惊讶惊叹，是不是很爽歪歪</p><p>下载spleeter，需要三个东东，python、tensorflow和conda，Mac电脑自带python2.7，因此我只需要先安装tensorflow和conda</p><p><strong>1、安装conda</strong></p><p>conda有anaconda和miniconda之分，后者功能会更精简一些，但完全足够支撑下载spleeter，我安装的就是miniconda；</p><p>下载地址如下：</p><p><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLmNvbmRhLmlvL2VuL2xhdGVzdC9taW5pY29uZGEuaHRtbA==">Miniconda - Conda documentationdocs.conda.io&#x2F;en&#x2F;latest&#x2F;miniconda.html<i class="fa fa-external-link-alt"></i></span></p><p>我下载的是适合Mac的最新版本</p><p><img data-src="/357-1/v2-ed602af1d9fedf03a74ac600653d156b_r.jpg" alt="img" loading="lazy"></p><p>可以直接输入代码看conda是否安装成功</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda</span><br></pre></td></tr></table></figure><p>如果最后显示一下信息，则说明安装成功</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda commands available from other packages：</span><br></pre></td></tr></table></figure><p>用conda安装spleeter时，默认站点是要翻墙的，我下载时打开了翻墙软件；若不能翻墙，可能会无法下载，需要更改下载源，可参考以下文章</p><p><a href="https://zhuanlan.zhihu.com/p/118743228">秘密小兔：伴奏提取神器spleeter探索记47 赞同 · 34 评论文章<img data-src="/357-1/v2-496f85d4463cea07a54febd30fc36ec6_180x120.jpg" alt="img" loading="lazy"></a></p><p><strong>2、安装tensorflow</strong></p><p>很多分享如何下载spleeter的文章里都没有提到这一步，但是直接用conda下载spleeter，会提示缺乏tensorflow，所以还是得安装</p><p>而tensorflow的下载是需要python的。</p><p>Mac电脑自带2.7版本的python，但tensorflow目前支持python3.5～3.8，因此我需要下载更高版本，这里我用conda下载python3.6，代码如下</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda install python=3.6</span><br></pre></td></tr></table></figure><p>下载完后，需要确认一下python版本，以及有无pip；理论上该版本python自带pip；每输入一行都要按一次回车键</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python --version</span><br><span class="line">pip --version</span><br></pre></td></tr></table></figure><p>这样以后，再下载tensorflow，代码如下</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install tensorflow</span><br></pre></td></tr></table></figure><p><strong>3、下载spleeter</strong></p><p>前面提到过，我在下载时，打开了翻墙软件，因此没有修改conda的下载源；代码如下</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda install -c conda-forge spleeter</span><br></pre></td></tr></table></figure><p>激活使用的环境</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda activate spleeter-cpu</span><br></pre></td></tr></table></figure><p>这样以后，spleeter下载成功，但是否真的成功，还得看能不能分离音频</p><p><strong>4、spleeter的使用</strong></p><p>不废话，直接上代码</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">spleeter separate -i 输入音频地址/1.mp3 -p spleeter:2stems -o 输出文件夹地址/1</span><br></pre></td></tr></table></figure><p>解释一下</p><ul><li>理论上支持所有格式的音频文件，但输出的是wav格式的音频文件</li><li>-i 输入的音频</li><li>-p spleeter:2stems 将该音频分成2轨，即人声和环境音；spleeter最多可以分离5条音轨</li><li>-o 输出的文件夹，里面包含人声和环境音两个音频文件</li></ul><p>比如我用spleeter分离的1.mp3，生成文件夹1，里面包含2个wav格式的音频文件</p><p><img data-src="/357-1/v2-cc1462bd8736badc14138ec3b75bf5ca_r.jpg" alt="img" loading="lazy"></p><p>至此，这两大神器终于到手啦，爽歪歪～</p><p>在下载这两个神器的过程中，曾遇到过N多下载不了的问题，可谓是山路十八弯，但本文几乎全部省略了，给出了一个比较快速顺利的下载路径；虽然无法保证绝对不会有问题，但至少可以省掉很多很多很多不必要的坑；如果还是有问题的话，可以百度网上各位大神的文章，相信最终都可以解决</p><p>以上</p><p>PS：后续会分享剪的第一个电影短视频，还有积累的一些素材下载源，以及使用FCP剪视频的小技巧，会有人想看吗，想看的可以点赞和评论哦；关于上面分享的内容还有什么问题的话，也可以点赞和评论，我看到都会回复的～</p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p><span class="exturl" data-url="aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC8zNTQ1ODI0ODU=">有这两大神器后，剪视频和音频像玩似的…… - 知乎 (zhihu.com)<i class="fa fa-external-link-alt"></i></span></p>]]></content>
    
    
    <summary type="html">默认</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>Final Cut Pro 支持的媒体格式</title>
    <link href="https://weilining.github.io/357.html"/>
    <id>https://weilining.github.io/357.html</id>
    <published>2021-11-24T18:41:48.000Z</published>
    <updated>2021-11-24T18:41:48.000Z</updated>
    
    <content type="html"><![CDATA[<p>您可以在 Final Cut Pro 中导入和处理以下视频、音频和静止图像格式：</p><h2 id="视频格式"><a href="#视频格式" class="headerlink" title="视频格式"></a>视频格式</h2><ul><li>Apple Animation Codec</li><li>Apple Intermediate Codec</li><li><span class="exturl" data-url="aHR0cHM6Ly9zdXBwb3J0LmFwcGxlLmNvbS9ndWlkZS8/cGxhdGZvcm09bWFjJnByb2R1Y3Q9ZmluYWwtY3V0LXBybyZ2YW5pdHluYW1lPSZ2ZXJzaW9uPTEwLjYmbG9jYWxlPXpoX0NOJnRvcGljaWQ9VkVSRDc5QzM3OTMmdHlwZT1kZG0mcGxhdGZvcm1PU1ZlcnNpb249MTEuNS4xJmFzaWRlPXRydWU=">Apple ProRes（所有版本）<i class="fa fa-external-link-alt"></i></span></li><li>Apple ProRes RAW 和 Apple ProRes RAW HQ</li><li><span class="exturl" data-url="aHR0cHM6Ly9zdXBwb3J0LmFwcGxlLmNvbS9ndWlkZS8/cGxhdGZvcm09bWFjJnByb2R1Y3Q9ZmluYWwtY3V0LXBybyZ2YW5pdHluYW1lPSZ2ZXJzaW9uPTEwLjYmbG9jYWxlPXpoX0NOJnRvcGljaWQ9VkVSQjk3Q0UxRTcmdHlwZT1kZG0mcGxhdGZvcm1PU1ZlcnNpb249MTEuNS4xJmFzaWRlPXRydWU=">AVCHD（包括 AVCCAM、AVCHD Lite 和 NXCAM）<i class="fa fa-external-link-alt"></i></span></li><li>AVC-ULTRA（包括 AVC-LongG、AVC-Intra Class 50&#x2F;100&#x2F;200&#x2F;4:4:4 和 AVC-Intra LT）</li><li>Canon Cinema RAW Light（需要相机制造商的插件软件）</li><li>DV（包括 DVCAM、DVCPRO 和 DVCPRO50）</li><li>DVCPRO HD</li><li><span class="exturl" data-url="aHR0cHM6Ly9zdXBwb3J0LmFwcGxlLmNvbS9ndWlkZS8/cGxhdGZvcm09bWFjJnByb2R1Y3Q9ZmluYWwtY3V0LXBybyZ2YW5pdHluYW1lPSZ2ZXJzaW9uPTEwLjYmbG9jYWxlPXpoX0NOJnRvcGljaWQ9VkVSRDc5QzNBMjEmdHlwZT1kZG0mcGxhdGZvcm1PU1ZlcnNpb249MTEuNS4xJmFzaWRlPXRydWU=">H.264<i class="fa fa-external-link-alt"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly9zdXBwb3J0LmFwcGxlLmNvbS9ndWlkZS8/cGxhdGZvcm09bWFjJnByb2R1Y3Q9ZmluYWwtY3V0LXBybyZ2YW5pdHluYW1lPSZ2ZXJzaW9uPTEwLjYmbG9jYWxlPXpoX0NOJnRvcGljaWQ9VkVSRDc5QzM1NjkmdHlwZT1kZG0mcGxhdGZvcm1PU1ZlcnNpb249MTEuNS4xJmFzaWRlPXRydWU=">HDV<i class="fa fa-external-link-alt"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly9zdXBwb3J0LmFwcGxlLmNvbS9ndWlkZS8/cGxhdGZvcm09bWFjJnByb2R1Y3Q9ZmluYWwtY3V0LXBybyZ2YW5pdHluYW1lPSZ2ZXJzaW9uPTEwLjYmbG9jYWxlPXpoX0NOJnRvcGljaWQ9VkVSOThENEMyQkUzJnR5cGU9ZGRtJnBsYXRmb3JtT1NWZXJzaW9uPTExLjUuMSZhc2lkZT10cnVl">HEVC<i class="fa fa-external-link-alt"></i></span>（需要 macOS 10.13 或更高版本）</li><li>iFrame</li><li>Motion JPEG（仅限 OpenDML）</li><li>MPEG IMX (D-10)</li><li>QuickTime 格式</li><li>REDCODE RAW (R3D)（需要相机制造商的插件软件）</li><li>未压缩的 8 位 4:2:2</li><li>未压缩的 10 位 4:2:2</li><li>XAVC（包括 XAVC-S）</li><li>XDCAM HD&#x2F;<span class="exturl" data-url="aHR0cHM6Ly9zdXBwb3J0LmFwcGxlLmNvbS9ndWlkZS8/cGxhdGZvcm09bWFjJnByb2R1Y3Q9ZmluYWwtY3V0LXBybyZ2YW5pdHluYW1lPSZ2ZXJzaW9uPTEwLjYmbG9jYWxlPXpoX0NOJnRvcGljaWQ9VkVSMTgyMzk5RjYmdHlwZT1kZG0mcGxhdGZvcm1PU1ZlcnNpb249MTEuNS4xJmFzaWRlPXRydWU=">EX<i class="fa fa-external-link-alt"></i></span>&#x2F;<span class="exturl" data-url="aHR0cHM6Ly9zdXBwb3J0LmFwcGxlLmNvbS9ndWlkZS8/cGxhdGZvcm09bWFjJnByb2R1Y3Q9ZmluYWwtY3V0LXBybyZ2YW5pdHluYW1lPSZ2ZXJzaW9uPTEwLjYmbG9jYWxlPXpoX0NOJnRvcGljaWQ9VkVSMTgyMzk5MUMmdHlwZT1kZG0mcGxhdGZvcm1PU1ZlcnNpb249MTEuNS4xJmFzaWRlPXRydWU=">HD422<i class="fa fa-external-link-alt"></i></span></li><li>XF-AVC</li><li>XF-HEVC</li></ul><h2 id="音频格式"><a href="#音频格式" class="headerlink" title="音频格式"></a>音频格式</h2><ul><li><span class="exturl" data-url="aHR0cHM6Ly9zdXBwb3J0LmFwcGxlLmNvbS9ndWlkZS8/cGxhdGZvcm09bWFjJnByb2R1Y3Q9ZmluYWwtY3V0LXBybyZ2YW5pdHluYW1lPSZ2ZXJzaW9uPTEwLjYmbG9jYWxlPXpoX0NOJnRvcGljaWQ9VkVSRDc5QzNBOTcmdHlwZT1kZG0mcGxhdGZvcm1PU1ZlcnNpb249MTEuNS4xJmFzaWRlPXRydWU=">AAC<i class="fa fa-external-link-alt"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly9zdXBwb3J0LmFwcGxlLmNvbS9ndWlkZS8/cGxhdGZvcm09bWFjJnByb2R1Y3Q9ZmluYWwtY3V0LXBybyZ2YW5pdHluYW1lPSZ2ZXJzaW9uPTEwLjYmbG9jYWxlPXpoX0NOJnRvcGljaWQ9VkVSNjVGNDg0QzcmdHlwZT1kZG0mcGxhdGZvcm1PU1ZlcnNpb249MTEuNS4xJmFzaWRlPXRydWU=">AIFF<i class="fa fa-external-link-alt"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly9zdXBwb3J0LmFwcGxlLmNvbS9ndWlkZS8/cGxhdGZvcm09bWFjJnByb2R1Y3Q9ZmluYWwtY3V0LXBybyZ2YW5pdHluYW1lPSZ2ZXJzaW9uPTEwLjYmbG9jYWxlPXpoX0NOJnRvcGljaWQ9VkVSNDFFODBCQTA1JnR5cGU9ZGRtJnBsYXRmb3JtT1NWZXJzaW9uPTExLjUuMSZhc2lkZT10cnVl">BWF<i class="fa fa-external-link-alt"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly9zdXBwb3J0LmFwcGxlLmNvbS9ndWlkZS8/cGxhdGZvcm09bWFjJnByb2R1Y3Q9ZmluYWwtY3V0LXBybyZ2YW5pdHluYW1lPSZ2ZXJzaW9uPTEwLjYmbG9jYWxlPXpoX0NOJnRvcGljaWQ9VkVSRDc5QzM3MEQmdHlwZT1kZG0mcGxhdGZvcm1PU1ZlcnNpb249MTEuNS4xJmFzaWRlPXRydWU=">CAF<i class="fa fa-external-link-alt"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly9zdXBwb3J0LmFwcGxlLmNvbS9ndWlkZS8/cGxhdGZvcm09bWFjJnByb2R1Y3Q9ZmluYWwtY3V0LXBybyZ2YW5pdHluYW1lPSZ2ZXJzaW9uPTEwLjYmbG9jYWxlPXpoX0NOJnRvcGljaWQ9VkVSRDc5QzM1Q0UmdHlwZT1kZG0mcGxhdGZvcm1PU1ZlcnNpb249MTEuNS4xJmFzaWRlPXRydWU=">MP3<i class="fa fa-external-link-alt"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly9zdXBwb3J0LmFwcGxlLmNvbS9ndWlkZS8/cGxhdGZvcm09bWFjJnByb2R1Y3Q9ZmluYWwtY3V0LXBybyZ2YW5pdHluYW1lPSZ2ZXJzaW9uPTEwLjYmbG9jYWxlPXpoX0NOJnRvcGljaWQ9VkVSRDc5QzNBOTcmdHlwZT1kZG0mcGxhdGZvcm1PU1ZlcnNpb249MTEuNS4xJmFzaWRlPXRydWU=">MP4<i class="fa fa-external-link-alt"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly9zdXBwb3J0LmFwcGxlLmNvbS9ndWlkZS8/cGxhdGZvcm09bWFjJnByb2R1Y3Q9ZmluYWwtY3V0LXBybyZ2YW5pdHluYW1lPSZ2ZXJzaW9uPTEwLjYmbG9jYWxlPXpoX0NOJnRvcGljaWQ9VkVSQ0ZFQTBCMEYwJnR5cGU9ZGRtJnBsYXRmb3JtT1NWZXJzaW9uPTExLjUuMSZhc2lkZT10cnVl">RF64<i class="fa fa-external-link-alt"></i></span>（需要 macOS 10.13 或更高版本）</li><li><span class="exturl" data-url="aHR0cHM6Ly9zdXBwb3J0LmFwcGxlLmNvbS9ndWlkZS8/cGxhdGZvcm09bWFjJnByb2R1Y3Q9ZmluYWwtY3V0LXBybyZ2YW5pdHluYW1lPSZ2ZXJzaW9uPTEwLjYmbG9jYWxlPXpoX0NOJnRvcGljaWQ9VkVSODUyQTBGRTQmdHlwZT1kZG0mcGxhdGZvcm1PU1ZlcnNpb249MTEuNS4xJmFzaWRlPXRydWU=">WAV<i class="fa fa-external-link-alt"></i></span></li></ul><h2 id="静止图像格式"><a href="#静止图像格式" class="headerlink" title="静止图像格式"></a>静止图像格式</h2><ul><li>BMP</li><li>GIF</li><li><span class="exturl" data-url="aHR0cHM6Ly9zdXBwb3J0LmFwcGxlLmNvbS9ndWlkZS8/cGxhdGZvcm09bWFjJnByb2R1Y3Q9ZmluYWwtY3V0LXBybyZ2YW5pdHluYW1lPSZ2ZXJzaW9uPTEwLjYmbG9jYWxlPXpoX0NOJnRvcGljaWQ9VkVSMjdCNDNBMzUzJnR5cGU9ZGRtJnBsYXRmb3JtT1NWZXJzaW9uPTExLjUuMSZhc2lkZT10cnVl">HEIF<i class="fa fa-external-link-alt"></i></span>（需要 macOS 10.13 或更高版本）</li><li>JPEG</li><li>PNG</li><li>PSD（静态和分层）</li><li>RAW</li><li>TGA</li><li>TIFF</li></ul><h2 id="容器格式"><a href="#容器格式" class="headerlink" title="容器格式"></a>容器格式</h2><ul><li>3GP</li><li>AVI</li><li><span class="exturl" data-url="aHR0cHM6Ly9zdXBwb3J0LmFwcGxlLmNvbS9ndWlkZS8/cGxhdGZvcm09bWFjJnByb2R1Y3Q9ZmluYWwtY3V0LXBybyZ2YW5pdHluYW1lPSZ2ZXJzaW9uPTEwLjYmbG9jYWxlPXpoX0NOJnRvcGljaWQ9VkVSQjNENDcyN0UzJnR5cGU9ZGRtJnBsYXRmb3JtT1NWZXJzaW9uPTExLjUuMSZhc2lkZT10cnVl">MOV<i class="fa fa-external-link-alt"></i></span> (QuickTime)</li><li>MP4</li><li>MTS&#x2F;M2TS</li><li><span class="exturl" data-url="aHR0cHM6Ly9zdXBwb3J0LmFwcGxlLmNvbS9ndWlkZS8/cGxhdGZvcm09bWFjJnByb2R1Y3Q9ZmluYWwtY3V0LXBybyZ2YW5pdHluYW1lPSZ2ZXJzaW9uPTEwLjYmbG9jYWxlPXpoX0NOJnRvcGljaWQ9VkVSNDExRDE0Q0ZBJnR5cGU9ZGRtJnBsYXRmb3JtT1NWZXJzaW9uPTExLjUuMSZhc2lkZT10cnVl">MXF<i class="fa fa-external-link-alt"></i></span></li></ul><p>有关您可以将影片导出为何种格式的信息，请参阅<span class="exturl" data-url="aHR0cHM6Ly9zdXBwb3J0LmFwcGxlLmNvbS9ndWlkZS8/cGxhdGZvcm09bWFjJnByb2R1Y3Q9ZmluYWwtY3V0LXBybyZ2YW5pdHluYW1lPSZ2ZXJzaW9uPTEwLjYmbG9jYWxlPXpoX0NOJnRvcGljaWQ9VkVSRTlCQkIxQ0M0JnR5cGU9ZGRtJnBsYXRmb3JtT1NWZXJzaW9uPTExLjUuMQ==">Final Cut Pro 支持的导出格式<i class="fa fa-external-link-alt"></i></span>。</p><p><strong>下载本手册：</strong><span class="exturl" data-url="aHR0cHM6Ly9ib29rcy5hcHBsZS5jb20vdXMvYm9vay9maW5hbC1jdXQtcHJvLXVzZXItZ3VpZGUvaWQ5NzYyOTkwODk=">Apple Books<i class="fa fa-external-link-alt"></i></span></p>]]></content>
    
    
    <summary type="html">默认</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>Final Cut Pro常用快捷键大全</title>
    <link href="https://weilining.github.io/355.html"/>
    <id>https://weilining.github.io/355.html</id>
    <published>2021-11-24T18:29:51.000Z</published>
    <updated>2021-11-24T18:29:51.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>这里先分享下我自己经常用的快捷键，基本也是必备的</strong>：</p><blockquote><p><strong>A</strong> ：工具切换为移动箭头 （有时操作太狂乱，工具不知道按着哪个了，就按下A，很受用）</p><p><strong>B</strong> ：切换为剪刀手<br><strong>Command + B</strong> ：在当前指针处剪断（这个干净利索，不用切换工具，直接剪断👍）</p><p>Option + X 取消选择素材中的片段 （在素材管理上拉素材时候，偶尔变成框选范围了，按下此键立刻恢复）</p><p>Shift + H 添加静帧，将当前视频时间线对应的帧定格</p><p>Ctrl +D 设置静止帧 时长 （更改上一行定格静帧的时长，按下后输入数字，然后按Enter就更改时间了）</p><p>Option + W 添加空隙（磁性时间线经常自动更着跑很烦人，加个空隙搞定它 😄）</p><p>Command + Option + delet 不受时间线影响的删除片段</p><p>Command + R 可以显示变速</p><p>Shift + B 添加变速标记点</p><p><strong>j k l</strong> ：播放中 快退 暂停&#x2F;播放 快进（按1次“L”和连按2次、3次，分别是不同速度哦）</p><p><strong>Command + z</strong> ：撤销操作</p><p><strong>shift+delete</strong> ：无缝删除</p><p><strong>Command + r</strong> ：Render 渲染出片</p></blockquote><hr><p><strong>Final cut x最常用快捷键：</strong></p><blockquote><p>Q 连接到主故事线</p></blockquote><blockquote><p>W 插入主故事线</p></blockquote><blockquote><p>E 追加到主故事线末尾</p></blockquote><blockquote><p>D 覆盖到主故事线</p></blockquote><blockquote><p>Cmd + B 剪断</p></blockquote><blockquote><p>Cmd + Shift + B 剪断所有轨</p></blockquote><blockquote><p>Alt + W 插入空隙</p></blockquote><blockquote><p>Alt + F 创建静帧</p></blockquote><blockquote><p>A 选择工具</p></blockquote><blockquote><p>T 修剪工具（滑动剪辑）</p></blockquote><blockquote><p>P 位置工具</p></blockquote><blockquote><p>R 选择范围</p></blockquote><blockquote><p>H 抓手工具</p></blockquote><blockquote><p>Z 缩放工具</p></blockquote><blockquote><p>Cmd + &#x2F; — 放大&#x2F;缩小时间线</p></blockquote><blockquote><p>Shift + Z 缩放以适应</p></blockquote><blockquote><p>Ctrl + Shift + S 分离音频</p></blockquote><blockquote><p>Ctrl + 加大音量</p></blockquote><blockquote><p>Ctrl — 减小音量</p></blockquote><blockquote><p>Shift + R 替换</p></blockquote><blockquote><p>Alt + R 从开头替换</p></blockquote><blockquote><p>Alt + K 在选中的效果上加关键帧</p></blockquote><blockquote><p>Alt + Shift + C 复制关键帧</p></blockquote><blockquote><p>Alt + Shift + V 粘贴关键帧</p></blockquote><blockquote><p>Alt + Shift + X 剪切关键帧</p></blockquote><blockquote><p>Alt + Shift + 主键盘Delete 删除关键帧</p></blockquote><blockquote><p>M 添加标记</p></blockquote><blockquote><p>Shift + Cmd + V 粘贴属性</p></blockquote><blockquote><p>Alt + Cmd + V 粘贴效果</p></blockquote><blockquote><p>Shift + N 恢复原速（100%）</p></blockquote><blockquote><p>Shift + H 定住时间（Hold）</p></blockquote><blockquote><p>Shift + B 在时间指针处切断素材速度，前后两段和分别调速</p></blockquote><blockquote><p>Ctrl + Cmd + R 自定义速度</p></blockquote><blockquote><p>Cmd + 6 打开调色面板</p></blockquote><blockquote><p>Cmd + 7 打开示波器</p></blockquote><hr><p><strong>Final cut X全部快捷键：</strong></p><blockquote><p>Cmd+B      创建新的媒体夹</p></blockquote><blockquote><p>Ctrl+U      选择标准窗口布局</p></blockquote><blockquote><p>Ctrl+Opiont+W  显示叠层</p></blockquote><blockquote><p>Shift+T     切换轨道高度选择</p></blockquote><blockquote><p>Z        选择缩放工具</p></blockquote><blockquote><p>A        选种默认“选择”工具</p></blockquote><blockquote><p>Cmd+H       隐藏界面</p></blockquote><blockquote><p>K+L       慢动作向前播放</p></blockquote><blockquote><p>K+J       慢动作向后播放</p></blockquote><blockquote><p>I        设置一个入点</p></blockquote><blockquote><p>O        设置一个出点</p></blockquote><blockquote><p>X        标记这个片段长度</p></blockquote><blockquote><p>Shift+I     移动播放头到入点位置</p></blockquote><blockquote><p>Shift+O     移动播放头到出点位置</p></blockquote><blockquote><p>Option+I     删除入点</p></blockquote><blockquote><p>Option+O     删除出点</p></blockquote><blockquote><p>Option+X     将入点和出点一起删除</p></blockquote><blockquote><p>Shift+P     播放片段播放头到出点之间的部分</p></blockquote><blockquote><p>Shift+\     播放入点到出点之间的部分</p></blockquote><blockquote><p>Shift+Z     在时间线上显示整个序列</p></blockquote><blockquote><p>Ctrl+L      启用循环播放</p></blockquote><blockquote><p>Cmd+A      选择序列中所有片段</p></blockquote><blockquote><p>Shift+Cmd+A   取消对片段的选择</p></blockquote><blockquote><p>N        打开或关闭吸附功能</p></blockquote><blockquote><p>Shift+F5     将所有的音频轨道锁定或解锁</p></blockquote><blockquote><p>Cmd+L      将时间线上视频轨道的片段和音频连接在一起</p></blockquote><blockquote><p>Shift+L     切换“链接选择”的开和关</p></blockquote><blockquote><p>E        把选顶的编辑点扩展到播放头所在的位置</p></blockquote><blockquote><p>RR        选择“波纹”工具</p></blockquote><blockquote><p>B        选择“刀片切割”工具</p></blockquote><blockquote><p>S        滑移</p></blockquote><blockquote><p>R        卷动</p></blockquote><blockquote><p>SS        滑动</p></blockquote><blockquote><p>Option+Q     打开“用户编好设置”窗口</p></blockquote><blockquote><p>shift+Q     打开“系统设置”窗口</p></blockquote><blockquote><p>Ctrl+Q      打开“简易设置”窗口</p></blockquote><blockquote><p>Cmd+Option+Q   打开“音频&#x2F;视频设置”窗口</p></blockquote><blockquote><p>Cmd+8      打开“记录和采集”窗口</p></blockquote><blockquote><p>Cmd+9      打开“子项属性”窗口</p></blockquote><blockquote><p>Cmd+0      打开“序列设置”窗口</p></blockquote><blockquote><p>Ctrl+C      批采集</p></blockquote><blockquote><p>F2        未采集媒体时在浏览器中记录一个片段</p></blockquote><blockquote><p>Cmd+T      应用默认视频转场</p></blockquote><blockquote><p>Option+Cmd+T   应用默认的音频转场</p></blockquote><blockquote><p>H        选中手形工具</p></blockquote><blockquote><p>Option+P     预览一个转场（播放每一侦命令）</p></blockquote><blockquote><p>Cmd+R      渲染被选中的转场</p></blockquote><blockquote><p>Option+R     渲染时间线上的所有转场</p></blockquote><blockquote><p>Option+F     保存自己喜欢的转场</p></blockquote><blockquote><p>V        选择与播放头最近的编辑点</p></blockquote><blockquote><p>Cmd+7      在“修剪编辑”窗口打开选定的编辑点</p></blockquote><blockquote><p>Cmd+U      生成一个子片段</p></blockquote><blockquote><p>M        添加标记</p></blockquote><blockquote><p>Shift+M     向前移动到下一个标记</p></blockquote><blockquote><p>Option+M     向后移动到上一个标记</p></blockquote><blockquote><p>Cmd+~      删除选中的标记</p></blockquote><blockquote><p>Ctrl+~      删除所有标记</p></blockquote><blockquote><p>Ctrl+P      重置片段中的标志侦</p></blockquote><blockquote><p>Option+W     在时间线上切换视频叠层的开关</p></blockquote><blockquote><p>Option+Cmd+W   在时间线上切换声音波形的开关</p></blockquote><blockquote><p>P        选择“笔”工具</p></blockquote><blockquote><p>Option+6     打开“音频混音器”</p></blockquote><blockquote><p>Cmd+J      打开“速度”窗口</p></blockquote><blockquote><p>Shift+N     从播放头所在的位置创建静侦</p></blockquote><blockquote><p>W        在“影像”“影像+线框”“线框”模式之间切换</p></blockquote><blockquote><p>Shift+K     向前移动到下一侦</p></blockquote><blockquote><p>Option+K     向回移动到前一侦</p></blockquote><blockquote><p>Ctrl+K      为“基本运动”参数，裁剪和扭曲设置一个关键侦</p></blockquote><blockquote><p>Option+7     打开侦检视器工具</p></blockquote><blockquote><p>Option+9     打开视频示波器工具</p></blockquote><blockquote><p>Option+单击   在检视器的关键侦图像上设置一个关键侦</p></blockquote><blockquote><p>Shift+Ctrl+O   当“多镜头编辑”键盘布局被装载时，它将“播放头同步”改变为“打开”</p></blockquote><blockquote><p>Cmd+Option+L   打开“音频增益调整”或“视频透明度调整”</p></blockquote><blockquote><p>Ctrl+Z      切换亮度溢出范围检查开或者关</p></blockquote><blockquote><p>Shift+上下方向键 [在标记点中移动]</p></blockquote><blockquote><p>Cmd+Option+V [去掉属性]</p></blockquote><blockquote><p>Ctrl+X [创建样本文字]</p></blockquote><blockquote><p>Ctrl+D [显示选定片段时长]</p></blockquote><blockquote><p>(Cmd+J能达到同样效果,但没Ctrl+D来的顺手~)</p></blockquote><blockquote><p>Ctrl+G [合拢空隙]合拢两个剪辑点之间的空隙</p></blockquote><blockquote><p>Ctrl+Z [亮度溢出范围检查开关]</p></blockquote><blockquote><p>Shift+\ [从人点到出点播放]</p></blockquote><blockquote><p>Option+W [片段叠层开关]</p></blockquote><blockquote><p>Cmd+Opton+W [切换波形开关]</p></blockquote><blockquote><p>Option+P [逐帧播放](优点是无须渲染即可看到结果 缺点是不实时 无音频)</p></blockquote><blockquote><p>Cmd+Shift+Z [重做]</p></blockquote><blockquote><p>Ctrl+B [启用&#x2F;停用选定片段]</p></blockquote><blockquote><p>Ctrl+V <a href="%E7%9B%B8%E5%BD%93%E4%BA%8E%E5%9C%A8%E6%92%AD%E6%94%BE%E5%A4%B4%E7%9A%84%E4%BD%8D%E7%BD%AE%E4%BD%BF%E7%94%A8%E5%88%80%E7%89%87%E5%B7%A5%E5%85%B7">添加剪辑点</a></p></blockquote><blockquote><p>Shift+i [移至入点]</p></blockquote><blockquote><p>Option+i [删除入点]</p></blockquote><blockquote><p>Shift+O [移至出点]</p></blockquote><blockquote><p>Option+O [删除出点]</p></blockquote><blockquote><p>X是为播放头所在的片段设置入出点</p></blockquote><blockquote><p>Option+X [直接删除入出点]</p></blockquote><blockquote><p>Option+X[取消入出点]</p></blockquote><blockquote><p>Cmd+8 采集素材 [在采集界面下 Shift+C是硬采]</p></blockquote><blockquote><p>Shift+Z [适配序列] (使序列完全显示 )</p></blockquote><blockquote><p>Shift+L [链接选择开关]</p></blockquote><blockquote><p>Cmd+L [用于音频和视频的链接开关]</p></blockquote><blockquote><p>Option+L [开关立体声对]</p></blockquote><blockquote><p>Ctrl +(加号) [将音量调高1db]</p></blockquote><blockquote><p>Ctrl -(减号) [将音量调低1db]</p></blockquote><blockquote><p>Ctrl [(左中括号) [将音量调高3db]</p></blockquote><blockquote><p>Ctrl ](右中括号) [将音量降低3db]</p></blockquote><blockquote><p>Cmd+左中括号 [后退]</p></blockquote><blockquote><p>Cmd+右中括号 [前进]</p></blockquote><blockquote><p>Cmd+Option+L [更改选中素材的不透明度（视频）或音频增益（音频）]</p></blockquote><blockquote><p>Ctrl+Z [切换亮度溢出范围检查开或关]</p></blockquote><blockquote><p>J K L,向后播放，停止播放，向前播放</p></blockquote><blockquote><p>空格键，向前播放</p></blockquote><blockquote><p>i,设置入点，o设置出点</p></blockquote><blockquote><p>shift+o [移至出点]</p></blockquote><blockquote><p>option+o [删除出点]</p></blockquote><blockquote><p>Option+\ [从人点到出点播放]</p></blockquote><blockquote><p>option+Q [选择用户偏好设置窗口]</p></blockquote><blockquote><p>Ctrl+Q [简易设置]</p></blockquote><blockquote><p>shift+Q [系统设置]</p></blockquote><blockquote><p>option+W [显示片段叠层的开关]</p></blockquote><blockquote><p>option+Cmd+W [在时间线上切换声音波形开关]</p></blockquote><blockquote><p>Cmd+7 [在修剪编辑窗口打开选定的编辑点]</p></blockquote><blockquote><p>option+p <a href="%E6%97%A0%E7%94%9F%E6%88%90%E6%B8%B2%E6%9F%93%E6%83%85%E5%86%B5%E4%B8%8B%E4%BD%BF%E7%94%A8">预览</a></p></blockquote><blockquote><p>ctrl+b [隐藏时间线的某层]</p></blockquote><blockquote><p>cmd+shift+z [后退恢复]</p></blockquote><blockquote><p>ctrl+k [增加关键帧]</p></blockquote><blockquote><p>option+（+-）[缩放控制]</p></blockquote><blockquote><p>Com+8 [采集素材]</p></blockquote><blockquote><p>com+r [渲染选定文件]</p></blockquote><blockquote><p>Option+r [全局渲染]</p></blockquote><blockquote><p>Option+H [自定义键盘布局]</p></blockquote>]]></content>
    
    
    <summary type="html">默认</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>最有效新建资源库、事件、项目final cut Pro</title>
    <link href="https://weilining.github.io/356.html"/>
    <id>https://weilining.github.io/356.html</id>
    <published>2021-11-24T18:27:52.000Z</published>
    <updated>2021-11-24T18:27:52.000Z</updated>
    
    <content type="html"><![CDATA[<p>从大小到依次是：<strong>资源库</strong>——<strong>事件</strong>——<strong>项目</strong>，</p><p>举个实例，假如我接的视频业务的类目比较杂，那么我会分成这样几个<strong>资源库</strong>：“风景片” “宣传片” “微电影”“讲座”“音乐会”</p><p>那我这次接了别人一个微电影的业务，那么我在“微电影”这个<strong>资源库</strong>下新建一个<strong>事件</strong>“张铁蛋的打工生涯”，然后把我拍好的视频、写好的BGM、以及一些照片等等放到这个<strong>事件</strong>里去。</p><p>那么真正的时间线却是“<strong>项目</strong>”，所以最终还是要<strong>新建项目</strong>才能开始剪。在这个<strong>事件</strong>中我可以建立多个<strong>项目</strong>，那么多个<strong>项目</strong>有什么好处？</p><p>好处就是方便我<strong>可以做多个版本</strong>，分别是“微电影正片” “微电影宣传片” “微电影花絮”……</p><p>所谓的方便，就是我在这个<strong>事件</strong>下面建立多个版本，在拖放素材进时间线的时候会非常方便，因为它们都是同一个<strong>事件</strong>的。</p><p>如果你想要做三个版本，不是建立三个<strong>项目</strong>，而是三个<strong>事件</strong>，那就非常没必要了。再讲夸张一点，为了这三个版本你建三个<strong>资源库</strong>，那就更傻了。</p><p>我这样算是讲明白了吗？</p>]]></content>
    
    
    <summary type="html">默认</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>FFmpeg mkv 转 fcp 用的 mp4（无需brew命令）</title>
    <link href="https://weilining.github.io/354.html"/>
    <id>https://weilining.github.io/354.html</id>
    <published>2021-11-24T18:24:44.000Z</published>
    <updated>2021-11-24T18:24:44.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h2><h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">MacBook pro 12.0.1</span><br><span class="line">Final Cut Pro 10.6.1</span><br><span class="line">ffmpeg version 4.4.1</span><br><span class="line">mkv是通过neatdownloadmanager下载的</span><br></pre></td></tr></table></figure><p>从网上下载的视频常常会因为格式不对无法导入FCP，因此需要转换格式，用ffmpeg的显著优势当然还是——速度快！FCP通常导入的视频格式为h264的mov或mp4格式，我是转成mp4格式导入。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i 1.mkv -vcodec h264 1.mp4</span><br></pre></td></tr></table></figure><p>网上很多mac安装FFmpeg的方法都是使用 brew install 命令，就国内的网络环境而言，很难下载成功。</p><p>下面我来介绍下更简单的方法：</p><p>1、前往ffmpeg官网，下载页面</p><p><span class="exturl" data-url="aHR0cDovL3d3dy5mZm1wZWcub3JnL2Rvd25sb2FkLmh0bWw=">http://www.ffmpeg.org/download.html<i class="fa fa-external-link-alt"></i></span></p><p>2、选择苹果图标，进入如下链接，选择你需要的版本进行下载</p><p><img data-src="/354/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzk2MzcyNQ==,size_16,color_FFFFFF,t_70.png" alt="img" loading="lazy"></p><p>3、网速好的话几秒钟就可成功，解压即可</p><p><img data-src="/354/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzk2MzcyNQ==,size_16,color_FFFFFF,t_70-20211125022512269.png" alt="img" loading="lazy"></p><p>4、前往命令行终端，执行ffmpeg命令（需要进入到安装目录，也可以配置到环境变量中）</p><h2 id="mac下快速将mkv、rmvb视频无损转mp4格式"><a href="#mac下快速将mkv、rmvb视频无损转mp4格式" class="headerlink" title="mac下快速将mkv、rmvb视频无损转mp4格式"></a>mac下快速将mkv、rmvb视频无损转mp4格式</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> Downloads</span><br><span class="line">./ffmpeg [option]</span><br><span class="line">ffmpeg -i input.mov -c copy output.mp4</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">默认</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>ANACONDA 取消终端出现base</title>
    <link href="https://weilining.github.io/353.html"/>
    <id>https://weilining.github.io/353.html</id>
    <published>2021-11-24T09:09:41.000Z</published>
    <updated>2021-11-24T09:09:41.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h2><p>打开终端，输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda config --<span class="built_in">set</span> auto_activate_base <span class="literal">false</span></span><br></pre></td></tr></table></figure><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><p>安装conda后取消命令行前出现的base，取消每次启动自动激活conda的基础环境</p><p>方法一：</p><p>每次在命令行通过conda deactivate退出base环境回到系统自带的环境</p><p>方法二</p><p>1，通过将auto_activate_base参数设置为false实现：</p><p>conda config --set auto_activate_base false</p><p>2，那要进入的话通过conda activate base</p><p>3，如果反悔了还是希望base一直留着的话通过conda config --set auto_activate_base true来恢复</p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTQ3MzQ4ODYvYXJ0aWNsZS9kZXRhaWxzLzkwNzE4NzE5">(48条消息) 安装conda后取消命令行前出现的base，取消每次启动自动激活conda的基础环境_南国那片枫叶的博客-CSDN博客<i class="fa fa-external-link-alt"></i></span></p>]]></content>
    
    
    <summary type="html">默认</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>最有效固态性能比对</title>
    <link href="https://weilining.github.io/352.html"/>
    <id>https://weilining.github.io/352.html</id>
    <published>2021-11-07T11:51:55.000Z</published>
    <updated>2021-11-07T11:51:55.000Z</updated>
    
    <content type="html"><![CDATA[<p> 顺序读取速度用于大文件拷贝，随机读取（IOPS）用于小文件拷贝。</p><p>下面是980pro性能图</p><p><img data-src="/352/image-20211107223845829.png" alt="image-20211107223845829" loading="lazy"></p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p><span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvJUU5JTlEJTlFJUU2JThGJUFFJUU3JTk5JUJDJUU2JTgwJUE3JUU4JUE4JTk4JUU2JTg2JUI2JUU5JUFCJTk0">非易失性存储器 - 维基百科，自由的百科全书 (wikipedia.org)<i class="fa fa-external-link-alt"></i></span></p>]]></content>
    
    
    <summary type="html">默认</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>最有效修改 Windows 7 的引导方式为 EFI</title>
    <link href="https://weilining.github.io/351.html"/>
    <id>https://weilining.github.io/351.html</id>
    <published>2021-11-07T10:16:53.000Z</published>
    <updated>2021-11-07T10:16:53.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>2019.3.12 Microsoft 发布了代号为 KB4474419 的系统补丁。该补丁更新了 bootmgfw.efi （版本 6.1.7601.24382），使得 Windows 7 支持了纯 UEFI 引导方式，不再需要替换文件。集成该补丁的系统可以直接封装用于 UEFI 方式部署。</p><h2 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h2><p>待测</p><h3 id="集成和封装"><a href="#集成和封装" class="headerlink" title="集成和封装"></a>集成和封装</h3><p>可以做一个形象的比喻：如果说集成就是用原盘在自己电脑的硬盘上做出一个系统的话，那么封装就是用原盘在别人的电脑上做好系统，再把硬盘拆下来安到自己的电脑上。也就是说，封装出来的系统，是被封装电脑污染过的系统，里面必然包含了众多只在原电脑上才有效的注册表键值等杂七杂八的东西。<strong>所以我们选择系统镜像，应该选择集成的，而不要选择封装的，切记！</strong></p><h3 id="制作目的："><a href="#制作目的：" class="headerlink" title="制作目的："></a>制作目的：</h3><p>免去全新安装Windows 7后更新补丁所耗费的数小时等待之苦。</p><p>让Windows 7具备已经具备的nvme硬盘支持（KB2990941-v3、KB3087873-v2）和EFI引导能力（KB4474419，该更新把bootmgfw.efi更新到了6.1.7601.24382。集成了KB4474419之后，sysprep出来的WIM，UEFI的机器上部署后，bcdboot c:\windows &#x2F;l zh-cn，直接就可以EFI方式引导了，无需再用Win8以上版本的bootmgfw.efi覆盖EFI分区的文件）。</p><p>为Windows Update的Windows 7更新服务器停摆做准备。Windows 7停止支持后，负责为其提供既有补丁更新的Windows Update服务器还会继续工作很长一段时间，但微软不可能一直为它提供在线更新补丁的服务。将更新汇总集成，可以免除以后安装Windows 7无法在线更新这一顾虑。 </p><p><strong>镜像下载地址：</strong></p><p><span class="exturl" data-url="aHR0cHM6Ly9wYW4uYmFpZHUuY29tL3MvMURvLUNwRU9zZEZIVWVtcmN1VlJ6Unc=">https://pan.baidu.com/s/1Do-CpEOsdFHUemrcuVRzRw<i class="fa fa-external-link-alt"></i></span></p><p>提取码：kpcw</p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p><span class="exturl" data-url="aHR0cHM6Ly9zdXBwb3J0Lm1pY3Jvc29mdC5jb20vemgtY24vdG9waWMvc2hhLTItY29kZS1zaWduaW5nLXN1cHBvcnQtdXBkYXRlLWZvci13aW5kb3dzLXNlcnZlci0yMDA4LXIyLXdpbmRvd3MtNy1hbmQtd2luZG93cy1zZXJ2ZXItMjAwOC1zZXB0ZW1iZXItMjMtMjAxOS04NGE4YWFkNS1kOGQ5LTJkNWMtNmQ3OC0zNGY5YWE1ZjgzMzk=">SHA-2 code signing support update for Windows Server 2008 R2, Windows 7, and Windows Server 2008: September 23, 2019 (microsoft.com)<i class="fa fa-external-link-alt"></i></span></p><p><span class="exturl" data-url="aHR0cHM6Ly93d3cuY2hpcGhlbGwuY29tL2ZvcnVtLnBocD9tb2Q9dmlld3RocmVhZCZ0aWQ9MjE4OTA5OSZleHRyYT1wYWdlPTEmcGFnZT0xJm1vYmlsZT0x">时代的见证：集成更新的Windows 7旗舰版、专业版镜像 - 软件系统交流 - Chiphell - 分享与交流用户体验<i class="fa fa-external-link-alt"></i></span></p><p><span class="exturl" data-url="aHR0cDovL3d3dy5jcnNreWJicy5vcmcvcmVhZC5waHA/dGlkPTMwOTEwOTUmZnBhZ2U9Mg==">修改 Windows 7 的引导方式为 EFI| 口- 应用交流区 - 霏凡论坛 - powered by phpwind.net (crskybbs.org)<i class="fa fa-external-link-alt"></i></span></p>]]></content>
    
    
    <summary type="html">默认</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>最有效centos下载</title>
    <link href="https://weilining.github.io/350.html"/>
    <id>https://weilining.github.io/350.html</id>
    <published>2021-11-06T10:01:41.000Z</published>
    <updated>2021-11-06T10:01:41.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="第三方"><a href="#第三方" class="headerlink" title="第三方"></a>第三方</h2><p>第三方保存的官方镜像源<span class="exturl" data-url="aHR0cHM6Ly9hcmNoaXZlLmtlcm5lbC5vcmcv">archive.kernel.org<i class="fa fa-external-link-alt"></i></span></p><h3 id="CentOS-Linux-7-6-1810-x86-64-iso-官方原版镜像下载"><a href="#CentOS-Linux-7-6-1810-x86-64-iso-官方原版镜像下载" class="headerlink" title="CentOS Linux 7.6 1810 x86 64 iso 官方原版镜像下载"></a>CentOS Linux 7.6 1810 x86 64 iso 官方原版镜像下载</h3><p>版本说明：</p><p>DVD：        # 标准安装镜像，一般常用。<br>Minimal：    # 最小安装镜像，自带的软件最少。<br>Everything： # 标准的基础上集成所有软件，镜像最大。<br>NetInstall： # 网络安装镜像，包小，但需联网才能安装。</p><p>官方种子下载：</p><p><span class="exturl" data-url="aHR0cHM6Ly9hcmNoaXZlLmtlcm5lbC5vcmcvY2VudG9zLXZhdWx0LzcuNi4xODEwL2lzb3MveDg2XzY0L0NlbnRPUy03LXg4Nl82NC1EVkQtMTgxMC50b3JyZW50">CentOS-7-x86_64-DVD-1810.torrent<i class="fa fa-external-link-alt"></i></span></p><p>官方ISO下载：</p><p><span class="exturl" data-url="aHR0cHM6Ly9hcmNoaXZlLmtlcm5lbC5vcmcvY2VudG9zLXZhdWx0LzcuNi4xODEwL2lzb3MveDg2XzY0L0NlbnRPUy03LXg4Nl82NC1EVkQtMTgxMC5pc28=">CentOS-7-x86_64-DVD-1810.iso<i class="fa fa-external-link-alt"></i></span></p><h2 id="官方"><a href="#官方" class="headerlink" title="官方"></a>官方</h2><h3 id="谷歌搜索centos第一个链接"><a href="#谷歌搜索centos第一个链接" class="headerlink" title="谷歌搜索centos第一个链接"></a>谷歌搜索<code>centos</code>第一个链接</h3><p> <span class="exturl" data-url="aHR0cHM6Ly93d3cuY2VudG9zLm9yZy9kb3dubG9hZC8jdGFiLTI=">Download (centos.org)<i class="fa fa-external-link-alt"></i></span></p><h3 id="找自己国家的镜像"><a href="#找自己国家的镜像" class="headerlink" title="找自己国家的镜像"></a>找自己国家的镜像</h3><p><span class="exturl" data-url="aHR0cHM6Ly93d3cuY2VudG9zLm9yZy9kb3dubG9hZC9taXJyb3JzLw==">Mirror List (centos.org)<i class="fa fa-external-link-alt"></i></span></p><h3 id="清华大学开源镜像站"><a href="#清华大学开源镜像站" class="headerlink" title="清华大学开源镜像站"></a>清华大学开源镜像站</h3><p><span class="exturl" data-url="aHR0cHM6Ly9taXJyb3JzLnR1bmEudHNpbmdodWEuZWR1LmNuL2NlbnRvcy8=">Index of &#x2F;centos&#x2F; | 清华大学开源软件镜像站 | Tsinghua Open Source Mirror<i class="fa fa-external-link-alt"></i></span></p><h3 id="以centos7-9为例"><a href="#以centos7-9为例" class="headerlink" title="以centos7.9为例"></a>以centos7.9为例</h3><p><span class="exturl" data-url="aHR0cHM6Ly9taXJyb3JzLnR1bmEudHNpbmdodWEuZWR1LmNuL2NlbnRvcy83LjkuMjAwOS9pc29zL3g4Nl82NC8=">Index of &#x2F;centos&#x2F;7.9.2009&#x2F;isos&#x2F;x86_64&#x2F; | 清华大学开源软件镜像站 | Tsinghua Open Source Mirror<i class="fa fa-external-link-alt"></i></span></p><p>桌面版</p><p><span class="exturl" data-url="aHR0cHM6Ly9taXJyb3JzLnR1bmEudHNpbmdodWEuZWR1LmNuL2NlbnRvcy83LjkuMjAwOS9pc29zL3g4Nl82NC9DZW50T1MtNy14ODZfNjQtRFZELTIwMDkuaXNv">CentOS-7-x86_64-DVD-2009.iso<i class="fa fa-external-link-alt"></i></span></p><p>ps:想下7.6只能用第三方保存的官方镜像源，官方不提供。</p>]]></content>
    
    
    <summary type="html">默认</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>最有效GitHub读源码</title>
    <link href="https://weilining.github.io/349.html"/>
    <id>https://weilining.github.io/349.html</id>
    <published>2021-11-04T11:51:11.000Z</published>
    <updated>2021-11-04T11:51:11.000Z</updated>
    
    <content type="html"><![CDATA[<p>地址是这个：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3NwcmluZy1wcm9qZWN0cy9zcHJpbmctYm9vdA==">https://github.com/spring-projects/spring-boot<i class="fa fa-external-link-alt"></i></span></p><p>打开之后很普通，没啥不同的</p><p>但是在 com变dev，你就会发现新大陆了</p><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuZGV2L3NwcmluZy1wcm9qZWN0cy9zcHJpbmctYm9vdA==">https://github.dev/spring-projects/spring-boot<i class="fa fa-external-link-alt"></i></span> </p><p>在<code>repo</code>直接点击&#96;.即可</p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmltemp3LmNuL3Bvc3RzL2dpdGh1YjFzLw==">另一种方式在 GitHub 上阅读源码 | 小嘉的部落格 (imzjw.cn)<i class="fa fa-external-link-alt"></i></span></p>]]></content>
    
    
    <summary type="html">默认</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>最有效GitHub Action 创建Release</title>
    <link href="https://weilining.github.io/348.html"/>
    <id>https://weilining.github.io/348.html</id>
    <published>2021-11-02T10:26:14.000Z</published>
    <updated>2021-11-02T10:26:14.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h2><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3dlaWxpbmluZy9Ib3N0bG9jQXV0b0dldFBvaW50cw==">weilining&#x2F;HostlocAutoGetPoints: 腾讯云函数和GitHub Action测试通过<i class="fa fa-external-link-alt"></i></span></p><h3 id="GitHub-Action"><a href="#GitHub-Action" class="headerlink" title="GitHub Action"></a>GitHub Action</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">name: CI</span><br><span class="line"></span><br><span class="line">on:</span><br><span class="line">  push:</span><br><span class="line">    # Sequence of patterns matched against refs/tags</span><br><span class="line">    tags:</span><br><span class="line">      - &quot;v*&quot; # Push events to matching v*, i.e. v1.0, v20.15.10</span><br><span class="line">jobs:</span><br><span class="line">  build:</span><br><span class="line">    runs-on: ubuntu-latest</span><br><span class="line"></span><br><span class="line">    steps:</span><br><span class="line">      - name: Checkout source</span><br><span class="line">        uses: actions/checkout@v1</span><br><span class="line">      - name: Build normal</span><br><span class="line">        run: |</span><br><span class="line"></span><br><span class="line">          zip -r mjjscf.zip ./*</span><br><span class="line">      - name: Create Release</span><br><span class="line">        id: create_release</span><br><span class="line">        uses: monkeyWie/create-release@master</span><br><span class="line">        env:</span><br><span class="line">          GITHUB_TOKEN: $&#123;&#123; secrets.GITHUB_TOKEN &#125;&#125;</span><br><span class="line">        with:</span><br><span class="line">          tag_name: $&#123;&#123; github.ref &#125;&#125;</span><br><span class="line">          release_name: Release $&#123;&#123; github.ref &#125;&#125;</span><br><span class="line">          draft: false</span><br><span class="line">          prerelease: false</span><br><span class="line"></span><br><span class="line">      - name: Upload Release normal windows</span><br><span class="line">        uses: actions/upload-release-asset@v1.0.1</span><br><span class="line">        env:</span><br><span class="line">          GITHUB_TOKEN: $&#123;&#123; secrets.GITHUB_TOKEN &#125;&#125;</span><br><span class="line">        with:</span><br><span class="line">          upload_url: $&#123;&#123; steps.create_release.outputs.upload_url &#125;&#125; # This pulls from the CREATE RELEASE step above, referencing it&#x27;s ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps</span><br><span class="line">          asset_path: ./mjjscf.zip</span><br><span class="line">          asset_name: normal-$&#123;&#123; steps.create_release.outputs.tag &#125;&#125;-mjjscf.zip</span><br><span class="line">          asset_content_type: application/zip</span><br></pre></td></tr></table></figure><h3 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">git rm -r --cached .</span><br><span class="line">git add .</span><br><span class="line">git commit -m &quot;main&quot;</span><br><span class="line">git pull origin main</span><br><span class="line">git push origin main</span><br><span class="line"># 创建tag名为v1.0.8，并添加描述</span><br><span class="line">git tag -a &quot;v1.0.8&quot; -m &#x27;发布v1.0.8版本</span><br><span class="line">修复了以下bug:</span><br><span class="line">1. xxxxx</span><br><span class="line">2. xxxxx&#x27;</span><br><span class="line"># 把tag推到github上</span><br><span class="line">git push --tags</span><br></pre></td></tr></table></figure><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p><span class="exturl" data-url="aHR0cHM6Ly9zZWdtZW50ZmF1bHQuY29tL2EvMTE5MDAwMDAyMDg3Mzg2MA==">Github Actions 尝鲜 - SegmentFault 思否<i class="fa fa-external-link-alt"></i></span></p>]]></content>
    
    
    <summary type="html">默认</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>最有效Python3本地模拟GitHub Actions secrets</title>
    <link href="https://weilining.github.io/347.html"/>
    <id>https://weilining.github.io/347.html</id>
    <published>2021-11-02T07:24:05.000Z</published>
    <updated>2021-11-02T07:24:05.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="实测"><a href="#实测" class="headerlink" title="实测"></a>实测</h2><p>GitHub Action 本地测试模拟</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export HOSTLOC_USERNAME=daydayup</span><br></pre></td></tr></table></figure><h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import os</span><br><span class="line">usernames = os.environ[&#x27;HOSTLOC_USERNAME&#x27;]</span><br></pre></td></tr></table></figure><p>本地运行正常</p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p><span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vbHVvY29kZXMvcC8xMDY5MDI0Ni5odG1s">python设置环境变量(临时和永久) - LuoSpider - 博客园 (cnblogs.com)<i class="fa fa-external-link-alt"></i></span></p><p><span class="exturl" data-url="aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC81ZTU5Zjk5MzkyMmM=">Linux 设置永久环境变量 - 简书 (jianshu.com)<i class="fa fa-external-link-alt"></i></span></p>]]></content>
    
    
    <summary type="html">默认</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>最有效更新Python</title>
    <link href="https://weilining.github.io/346.html"/>
    <id>https://weilining.github.io/346.html</id>
    <published>2021-11-02T00:01:46.000Z</published>
    <updated>2021-11-02T00:01:46.000Z</updated>
    
    <content type="html"><![CDATA[<p><span class="exturl" data-url="aHR0cHM6Ly93d3cucHl0aG9uLm9yZy9kb3dubG9hZHMv">Download Python | Python.org<i class="fa fa-external-link-alt"></i></span></p>]]></content>
    
    
    <summary type="html">默认</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>Defaulting to user installation because normal site-packages is not writeable</title>
    <link href="https://weilining.github.io/345.html"/>
    <id>https://weilining.github.io/345.html</id>
    <published>2021-11-01T20:15:46.000Z</published>
    <updated>2021-11-01T20:15:46.000Z</updated>
    
    <content type="html"><![CDATA[<p>Python 3:</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 -m pip install [package_name]</span><br></pre></td></tr></table></figure><p>Python 2:</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -m pip install [package_name]</span><br></pre></td></tr></table></figure><h2 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h2><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip3 install -i https://pypi.python.org/simple python-telegram-bot==</span><br><span class="line">pip install -i https://pypi.python.org/simple python-telegram-bot==</span><br></pre></td></tr></table></figure><p><img data-src="/345/image-20211102041659816.png" alt="image-20211102041659816" loading="lazy"></p><h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python3 -m pip install -i https://pypi.python.org/simple python-telegram-bot==</span><br><span class="line">python -m pip install -i https://pypi.python.org/simple python-telegram-bot==</span><br></pre></td></tr></table></figure><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p><span class="exturl" data-url="aHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvNTk5OTcwNjUvcGlwLXB5dGhvbi1ub3JtYWwtc2l0ZS1wYWNrYWdlcy1pcy1ub3Qtd3JpdGVhYmxlLzY1MjkwNjM4">pip&#x2F;python: normal site-packages is not writeable - Stack Overflow<i class="fa fa-external-link-alt"></i></span></p>]]></content>
    
    
    <summary type="html">默认</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>最有效Python模块安装在文件</title>
    <link href="https://weilining.github.io/344.html"/>
    <id>https://weilining.github.io/344.html</id>
    <published>2021-11-01T19:29:01.000Z</published>
    <updated>2021-11-01T19:29:01.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文以安装 <code>numpy</code> 库为例：</p><ol><li>在本地终端中执行 <code>mkdir test-package</code> 命令，创建一个目录用于存放函数代码和依赖库。</li><li>执行以下命令，在该目录下安装 <code>numpy</code> 依赖库。</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd test-package</span><br><span class="line">pip install numpy -t .</span><br></pre></td></tr></table></figure><ul><li>您可以使用 <code>pip freeze &gt; requirements.txt</code> 生成本地环境下所有依赖的 <code>requirements.txt</code> 文件。</li><li>在 IDE 的终端中执行 <code>pip install -r requirements.txt -t .</code> 即可根据 <code>requirements.txt</code> 的配置安装依赖包。</li></ul>]]></content>
    
    
    <summary type="html">默认</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>最有效python批量安装模块</title>
    <link href="https://weilining.github.io/343.html"/>
    <id>https://weilining.github.io/343.html</id>
    <published>2021-11-01T17:22:22.000Z</published>
    <updated>2021-11-01T17:22:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>我相信很多小伙伴带有一个困扰，换了电脑或者重新装了系统之后，自己之前搭建的python环境和模块等等，都需要重新部署，特别费劲。有没有什么简单的方法呢？答案显而易见，请看下面介绍!</p><h1 id="1-创建requirements-txt文件，把所需要安装的模块都写进去"><a href="#1-创建requirements-txt文件，把所需要安装的模块都写进去" class="headerlink" title="1.创建requirements.txt文件，把所需要安装的模块都写进去"></a>1.创建requirements.txt文件，把所需要安装的模块都写进去</h1><p><img data-src="https://upload-images.jianshu.io/upload_images/18158347-7713e17d91dc65d3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/719/format/webp" alt="img" loading="lazy"></p><p>当然，版本号可以为空，为空时自动最新版本</p><h1 id="2-执行命令安装requirements-txt中的模块"><a href="#2-执行命令安装requirements-txt中的模块" class="headerlink" title="2.执行命令安装requirements.txt中的模块"></a>2.执行命令安装requirements.txt中的模块</h1><blockquote><p>pip install -r requirements.txt </p></blockquote><p>等待系统自动下载安装，简单快速</p><h1 id="3-已安装模块的导出"><a href="#3-已安装模块的导出" class="headerlink" title="3.已安装模块的导出"></a>3.已安装模块的导出</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">您可以使用 pip freeze &gt; requirements.txt 生成本地环境下所有依赖的 requirements.txt 文件。</span><br><span class="line">在 IDE 的终端中执行 pip install -r requirements.txt -t . 即可根据 requirements.txt 的配置安装依赖包。</span><br></pre></td></tr></table></figure><p>当然，会有一些小伙伴说，我模块安装的太多，一个一个写出来也挺费劲呢，有没有简单的方法呢？请看下面：</p><p>在终端执行命令：</p><blockquote><p>pip3 freeze &gt;requirements.txt</p></blockquote><p><img data-src="/343/image-20211102012409686.png" alt="image-20211102012409686" loading="lazy"></p><p>生成已安装的模块requirements.txt</p>]]></content>
    
    
    <summary type="html">默认</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>最有效Heroku Yes</title>
    <link href="https://weilining.github.io/342.html"/>
    <id>https://weilining.github.io/342.html</id>
    <published>2021-10-31T18:38:15.000Z</published>
    <updated>2021-10-31T18:38:15.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h2><h3 id="注册"><a href="#注册" class="headerlink" title="注册"></a>注册</h3><p><span class="exturl" data-url="aHR0cHM6Ly9zaWdudXAuaGVyb2t1LmNvbS9hY2NvdW50">Heroku | Sign up<i class="fa fa-external-link-alt"></i></span></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">The domain qq.com has been blocked.</span><br></pre></td></tr></table></figure><p><code>qq</code>邮箱不行，用<code>yandex</code>邮箱</p><p><span class="exturl" data-url="aHR0cHM6Ly9wYXNzcG9ydC55YW5kZXguY29tL3JlZ2lzdHJhdGlvbg==">Registration (yandex.com)<i class="fa fa-external-link-alt"></i></span></p><h3 id="Fork"><a href="#Fork" class="headerlink" title="Fork"></a>Fork</h3><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2JjbHN3bDA4MjcvdjJyYXktaGVyb2t1">bclswl0827&#x2F;v2ray-heroku: 用于在 Heroku 上部署 V2Ray WebSocket。 (github.com)<i class="fa fa-external-link-alt"></i></span></p><p><img data-src="/342/image-20211101030612448.png" alt="image-20211101030612448" loading="lazy"></p><h3 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://dashboard.heroku.com/new?template=https://github.com/w6l/daydayup</span><br></pre></td></tr></table></figure><blockquote><p><a href="https://dashboard.heroku.com/new?template=https://github.com/w6l/daydayup"><img data-src="/342/button.png" alt="Deploy" loading="lazy"></a></p></blockquote><h3 id="成功"><a href="#成功" class="headerlink" title="成功"></a>成功</h3><p>打开</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://yourapp.herokuapp.com/</span><br></pre></td></tr></table></figure><p>返回</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Bad Request</span><br></pre></td></tr></table></figure><h3 id="套cloudflare"><a href="#套cloudflare" class="headerlink" title="套cloudflare"></a>套cloudflare</h3><p>CloudFlare Workers反代代码（可分别用两个账号的应用程序名（<code>PROTOCOL</code>、<code>UUID</code>、<code>WS_PATH</code>保持一致），单双号天分别执行，那一个月就有550+550小时）</p><p><span class="exturl" data-url="aHR0cHM6Ly9kYXNoLmNsb3VkZmxhcmUuY29tL2xvZ2lu">Cloudflare - Web Performance &amp; Security<i class="fa fa-external-link-alt"></i></span></p><p>创建<code>Worker</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">const SingleDay = &#x27;app0.herokuapp.com&#x27;</span><br><span class="line">const DoubleDay = &#x27;app1.herokuapp.com&#x27;</span><br><span class="line">addEventListener(</span><br><span class="line">    &quot;fetch&quot;,event =&gt; &#123;</span><br><span class="line">    </span><br><span class="line">        let nd = new Date();</span><br><span class="line">        if (nd.getDate()%2) &#123;</span><br><span class="line">            host = SingleDay</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            host = DoubleDay</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        let url=new URL(event.request.url);</span><br><span class="line">        url.hostname=host;</span><br><span class="line">        let request=new Request(url,event.request);</span><br><span class="line">        event. respondWith(</span><br><span class="line">            fetch(request)</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="反代成功"><a href="#反代成功" class="headerlink" title="反代成功"></a>反代成功</h3><p> 进阶</p><p>heorku可以绑卡（应用一直在线，不扣费），绑定域名，套cf，<span class="exturl" data-url="aHR0cHM6Ly91cHRpbWVyb2JvdC5jb20v">uptimerobot<i class="fa fa-external-link-alt"></i></span> 定时访问防止休眠（只监控CF Workers反代地址好了，不然几个账户一起监控没几天就到期了）</p><h3 id="CloudFlare-Workers反代代码（可分别用两个账号的应用程序名（PROTOCOL、UUID、WS-PATH保持一致），单双号天分别执行，那一个月就有550-550小时）"><a href="#CloudFlare-Workers反代代码（可分别用两个账号的应用程序名（PROTOCOL、UUID、WS-PATH保持一致），单双号天分别执行，那一个月就有550-550小时）" class="headerlink" title="CloudFlare Workers反代代码（可分别用两个账号的应用程序名（PROTOCOL、UUID、WS_PATH保持一致），单双号天分别执行，那一个月就有550+550小时）"></a>CloudFlare Workers反代代码（可分别用两个账号的应用程序名（<code>PROTOCOL</code>、<code>UUID</code>、<code>WS_PATH</code>保持一致），单双号天分别执行，那一个月就有550+550小时）</h3><p>CloudFlare Workers单账户反代代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">addEventListener(</span><br><span class="line">    &quot;fetch&quot;,event =&gt; &#123;</span><br><span class="line">        let url=new URL(event.request.url);</span><br><span class="line">        url.hostname=&quot;appname.herokuapp.com&quot;;</span><br><span class="line">        let request=new Request(url,event.request);</span><br><span class="line">        event. respondWith(</span><br><span class="line">            fetch(request)</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>CloudFlare Workers单双日轮换反代代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">const SingleDay = &#x27;app0.herokuapp.com&#x27;</span><br><span class="line">const DoubleDay = &#x27;app1.herokuapp.com&#x27;</span><br><span class="line">addEventListener(</span><br><span class="line">    &quot;fetch&quot;,event =&gt; &#123;</span><br><span class="line">    </span><br><span class="line">        let nd = new Date();</span><br><span class="line">        if (nd.getDate()%2) &#123;</span><br><span class="line">            host = SingleDay</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            host = DoubleDay</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        let url=new URL(event.request.url);</span><br><span class="line">        url.hostname=host;</span><br><span class="line">        let request=new Request(url,event.request);</span><br><span class="line">        event. respondWith(</span><br><span class="line">            fetch(request)</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>CloudFlare Workers每五天轮换一遍式反代代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">const Day0 = &#x27;app0.herokuapp.com&#x27;</span><br><span class="line">const Day1 = &#x27;app1.herokuapp.com&#x27;</span><br><span class="line">const Day2 = &#x27;app2.herokuapp.com&#x27;</span><br><span class="line">const Day3 = &#x27;app3.herokuapp.com&#x27;</span><br><span class="line">const Day4 = &#x27;app4.herokuapp.com&#x27;</span><br><span class="line">addEventListener(</span><br><span class="line">    &quot;fetch&quot;,event =&gt; &#123;</span><br><span class="line">    </span><br><span class="line">        let nd = new Date();</span><br><span class="line">        let day = nd.getDate() % 5;</span><br><span class="line">        if (day === 0) &#123;</span><br><span class="line">            host = Day0</span><br><span class="line">        &#125; else if (day === 1) &#123;</span><br><span class="line">            host = Day1</span><br><span class="line">        &#125; else if (day === 2) &#123;</span><br><span class="line">            host = Day2</span><br><span class="line">        &#125; else if (day === 3)&#123;</span><br><span class="line">            host = Day3</span><br><span class="line">        &#125; else if (day === 4)&#123;</span><br><span class="line">            host = Day4</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            host = Day1</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        let url=new URL(event.request.url);</span><br><span class="line">        url.hostname=host;</span><br><span class="line">        let request=new Request(url,event.request);</span><br><span class="line">        event. respondWith(</span><br><span class="line">            fetch(request)</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>CloudFlare Workers一周轮换反代代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">const Day0 = &#x27;app0.herokuapp.com&#x27;</span><br><span class="line">const Day1 = &#x27;app1.herokuapp.com&#x27;</span><br><span class="line">const Day2 = &#x27;app2.herokuapp.com&#x27;</span><br><span class="line">const Day3 = &#x27;app3.herokuapp.com&#x27;</span><br><span class="line">const Day4 = &#x27;app4.herokuapp.com&#x27;</span><br><span class="line">const Day5 = &#x27;app5.herokuapp.com&#x27;</span><br><span class="line">const Day6 = &#x27;app6.herokuapp.com&#x27;</span><br><span class="line">addEventListener(</span><br><span class="line">    &quot;fetch&quot;,event =&gt; &#123;</span><br><span class="line">    </span><br><span class="line">        let nd = new Date();</span><br><span class="line">        let day = nd.getDay();</span><br><span class="line">        if (day === 0) &#123;</span><br><span class="line">            host = Day0</span><br><span class="line">        &#125; else if (day === 1) &#123;</span><br><span class="line">            host = Day1</span><br><span class="line">        &#125; else if (day === 2) &#123;</span><br><span class="line">            host = Day2</span><br><span class="line">        &#125; else if (day === 3)&#123;</span><br><span class="line">            host = Day3</span><br><span class="line">        &#125; else if (day === 4) &#123;</span><br><span class="line">            host = Day4</span><br><span class="line">        &#125; else if (day === 5) &#123;</span><br><span class="line">            host = Day5</span><br><span class="line">        &#125; else if (day === 6) &#123;</span><br><span class="line">            host = Day6</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            host = Day1</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        let url=new URL(event.request.url);</span><br><span class="line">        url.hostname=host;</span><br><span class="line">        let request=new Request(url,event.request);</span><br><span class="line">        event. respondWith(</span><br><span class="line">            fetch(request)</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h2 id="heroku还有这些有趣的项目"><a href="#heroku还有这些有趣的项目" class="headerlink" title="heroku还有这些有趣的项目"></a>heroku还有这些有趣的项目</h2><p>在线vscode：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2JwbWN0L2RlcGxveS1jb2RlLXNlcnZlci9ibG9iL21haW4vZ3VpZGVzL2hlcm9rdS5tZA==">https://github.com/bpmct/deploy-code-server/blob/main/guides/heroku.md<i class="fa fa-external-link-alt"></i></span>  <strong>试过</strong><br>bitwarden： <span class="exturl" data-url="aHR0cHM6Ly9lbGVtZW50cy5oZXJva3UuY29tL2J1dHRvbnMvbXV0b3V4aWEvYml0d2FyZGVucnNfaGVyb2t1">https://elements.heroku.com/buttons/mutouxia/bitwardenrs_heroku<i class="fa fa-external-link-alt"></i></span> <strong>试过</strong><br>搭建自己的搜索引擎（基于Google）： <span class="exturl" data-url="aHR0cHM6Ly9lbGVtZW50cy5oZXJva3UuY29tL2J1dHRvbnMvYmVuYnVzYnkvd2hvb2dsZS1zZWFyY2g=">https://elements.heroku.com/buttons/benbusby/whoogle-search<i class="fa fa-external-link-alt"></i></span>  <strong>试过</strong><br>万能镜像站（可镜像几乎所有网站，部分网站支持登录）： <span class="exturl" data-url="aHR0cHM6Ly9lbGVtZW50cy5oZXJva3UuY29tL2J1dHRvbnMvYmluYXJ5LXBlcnNvbi93b21naW54">https://elements.heroku.com/buttons/binary-person/womginx<i class="fa fa-external-link-alt"></i></span>  <strong>试过</strong><br>wordpress博客： <span class="exturl" data-url="aHR0cHM6Ly9lbGVtZW50cy5oZXJva3UuY29tL2J1dHRvbnMvcGhpbGlwcGhldWVyL3dvcmRwcmVzcy1oZXJva3U=">https://elements.heroku.com/buttons/philippheuer/wordpress-heroku<i class="fa fa-external-link-alt"></i></span>  <strong>试过</strong><br>onemanager： <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3FrcXB0dGdmL09uZU1hbmFnZXItcGhw">https://github.com/qkqpttgf/OneManager-php<i class="fa fa-external-link-alt"></i></span>    <strong>试过</strong><br>hostloc签到： <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2xhb2d1aTIwMDgvaGVyb2t1X2hvc3Rsb2NfZ2V0X3BvaW50czI=">https://github.com/laogui2008/heroku_hostloc_get_points2<i class="fa fa-external-link-alt"></i></span><br>Office 全局管理程序(PHP) ： <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3Rlc3Rub2JvZHkvb2ZmaWNlX2FkbWluX2hlcm9rdQ==">https://github.com/testnobody/office_admin_heroku<i class="fa fa-external-link-alt"></i></span><br>cloudreve ： <span class="exturl" data-url="aHR0cHM6Ly9lbGVtZW50cy5oZXJva3UuY29tL2J1dHRvbnMvdXNlYmx1ZS9jbG91ZHJldmUtaGVyb2t1">https://elements.heroku.com/buttons/useblue/cloudreve-heroku<i class="fa fa-external-link-alt"></i></span><br>mega网盘挂载： <span class="exturl" data-url="aHR0cHM6Ly9lbGVtZW50cy5oZXJva3UuY29tL2J1dHRvbnMvZGV2ZWxvcGVyYW5hei9tZWdhLm56LXJjbG9uZS1pbmRleC1oZXJva3U=">https://elements.heroku.com/buttons/developeranaz/mega.nz-rclone-index-heroku<i class="fa fa-external-link-alt"></i></span><br>我的世界服务器： <span class="exturl" data-url="aHR0cHM6Ly9lbGVtZW50cy5oZXJva3UuY29tL2J1dHRvbnMvamt1dG5lci9oZXJva3UtYnVpbGRwYWNrLW1pbmVjcmFmdA==">https://elements.heroku.com/buttons/jkutner/heroku-buildpack-minecraft<i class="fa fa-external-link-alt"></i></span><br>rsshub： <span class="exturl" data-url="aHR0cHM6Ly9lbGVtZW50cy5oZXJva3UuY29tL2J1dHRvbnMvZGl5Z29kL3Jzc2h1Yg==">https://elements.heroku.com/buttons/diygod/rsshub<i class="fa fa-external-link-alt"></i></span><br>有图比-dl（下载ytb视频）： <span class="exturl" data-url="aHR0cHM6Ly9lbGVtZW50cy5oZXJva3UuY29tL2J1dHRvbnMvYW5kcmV3c3RlY2gvJUU2JTlDJTg5JUU1JTlCJUJFJUU2JUFGJTk0LWRsLWFwaS1zZXJ2ZXI=">https://elements.heroku.com/buttons/andrewstech/有图比-dl-api-server<i class="fa fa-external-link-alt"></i></span></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">干货插眼</span><br><span class="line"></span><br><span class="line">hostloc签到Python脚本 之 Heroku 篇</span><br><span class="line">https://github.com/laogui2008/heroku_hostloc_get_points2</span><br><span class="line">Office 全局管理程序(PHP) Heroku 一键部署</span><br><span class="line">https://github.com/testnobody/office_admin_heroku</span><br><span class="line">用heroku搭建一个随机&quot;色图&quot;</span><br><span class="line">https://dashboard.heroku.com/new ... 4740/randpic-heroku</span><br></pre></td></tr></table></figure><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p><span class="exturl" data-url="aHR0cHM6Ly9lbGVtZW50cy5oZXJva3UuY29tL2J1dHRvbnMvc3Vpa2FyZW1pbGlhL2hlcm9rdS12MnJheQ==">suikaremilia&#x2F;Heroku-v2ray - Buttons - Heroku Elements<i class="fa fa-external-link-alt"></i></span></p>]]></content>
    
    
    <summary type="html">默认</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>最有效国内外网站测速及性能分析工具</title>
    <link href="https://weilining.github.io/341.html"/>
    <id>https://weilining.github.io/341.html</id>
    <published>2021-10-31T17:17:13.000Z</published>
    <updated>2021-10-31T17:17:13.000Z</updated>
    
    <content type="html"><![CDATA[<p><span class="exturl" data-url="aHR0cHM6Ly93d3cuYm9jZS5jb20v">boce.com:网站测速-ping检测-域名污染-域名被墙-dns查询-IPv6网站测试-路由跟踪查询-劫持检测<i class="fa fa-external-link-alt"></i></span></p><p><span class="exturl" data-url="aHR0cHM6Ly93d3cucGluZy5jbi8=">Ping.cn:网站测速-ping检测-dns查询-ipv6网站测试-路由跟踪查询<i class="fa fa-external-link-alt"></i></span></p><p><span class="exturl" data-url="aHR0cHM6Ly93d3cuMTdjZS5jb20vZ2V0">GET测试 网站速度测试 17CE<i class="fa fa-external-link-alt"></i></span></p><p><span class="exturl" data-url="aHR0cHM6Ly90b29sLmNoaW5hei5jb20vc2l0ZXNwZWVk">网站测速工具 - 站长工具 (chinaz.com)<i class="fa fa-external-link-alt"></i></span></p><p><span class="exturl" data-url="aHR0cHM6Ly93d3cuYWljZXN1LmNuLw==">测速网,网站测速,在线网页测速工具,网络宽带测速-谷歌测速网 (aicesu.cn)<i class="fa fa-external-link-alt"></i></span></p><p><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXJzLmdvb2dsZS5jb20vc3BlZWQvcGFnZXNwZWVkL2luc2lnaHRzLz9obD16aC1jbg==">PageSpeed Insights (google.com)<i class="fa fa-external-link-alt"></i></span></p><p><span class="exturl" data-url="aHR0cDovL3d3dy53ZWJrYWthLmNvbS8=">网速测试,测网速,网速检测,网站速度测试—卡卡网 www.webkaka.com<i class="fa fa-external-link-alt"></i></span></p><p><span class="exturl" data-url="aHR0cHM6Ly93d3cuMzZjZS5uZXQv">网站测速工具-网速测试-测网站打开速度 (36ce.net)<i class="fa fa-external-link-alt"></i></span></p><p>站长，尤其是SEOer，都明白网站的访问速度对用户体验和搜索引擎排名的重要性。</p><p>早在2012年，<em>The Google Gospel of Speed</em> 中就提到，对于Google自身的搜索结果页，每400毫秒的延迟就会导致整体搜索量下降0.44%。</p><p>对于移动端，就更可怕了：谷歌2018年的最新研究表明，当移动端页面加载时间从1秒增加到3秒时，跳出率会增加32%；从1秒增加到5秒，跳出率会增加90%；如果从1秒增加到超过10秒，跳出率会增加123%。</p><p>就在这个月，Zac给国内的SEOer们更新了这个消息：<span class="exturl" data-url="aHR0cHM6Ly93d3cuc2VvemFjLmNvbS9tb2JpbGUtc2VvL21vYmlsZS1zcGVlZC11cGRhdGUv">Google正式上线：页面速度影响移动搜索排名<i class="fa fa-external-link-alt"></i></span><br>而百度和谷歌各自正大力推广的MIP和AMP，也都在不断告诉我们网站访问速度的重要性。</p><p><img data-src="/341/3437537680.jpg" alt="常用国内外网站测速及性能分析工具" loading="lazy"></p><p>怎样让网站速度变快？这涉及到网络环境、服务器位置和配置、DNS解析、CDN、网站结构和代码优化等诸多方面，不可谓不复杂，普通玩家今天不打算展开，而是对网站速度优化的基础：网站测速及性能分析，做一些常用网站、工具的梳理。</p><p>根据普通玩家自己的理解，“网站测速” 这个概念，总的来说可以分为三种情况：</p><h2 id="测试多地访问网站的速度"><a href="#测试多地访问网站的速度" class="headerlink" title="测试多地访问网站的速度"></a>测试多地访问网站的速度</h2><p>网站多地测速工具&#x2F;网站，通常是<strong>同时测试并列出众多监测点到网站的主要速度指标</strong>(如解析时间、连接时间、下载速度等)，一般<strong>不用于</strong>检测网站代码及服务器性能优化的情况，而是主要用于选购服务器&#x2F;VPS、服务器&#x2F;CDN在各地的网速排查、CDN部署等。</p><ul><li><a href="https://www.17ce.com/"><strong>17ce</strong></a> <em>(国内网站)</em><ul><li>60+个国内及香港监测点,适用于<strong>国内</strong>各地访问网站的速度测试</li><li>提供 Get, Ping, 路由追踪, Dns, Cdn等多维度速度测试</li><li>提供监控API(付费)</li></ul></li><li><a href="http://www.webkaka.com/"><strong>卡卡网 Webkaka</strong></a> <em>(国内网站)</em><ul><li>60+个国内监测点, 30+个海外监测点，适用于<strong>国内</strong>或<strong>全球</strong>各地访问网站的速度测试</li><li>提供 Get, ping, 路由追踪, Dns等多维度速度测试</li><li>提供网站速度诊断功能</li></ul></li><li><a href="https://performance.sucuri.net/"><strong>Sucuri Load Time Tester</strong></a> <em>(国外网站)</em><ul><li>15+个全球监测点, 适用于<strong>全球</strong>各地访问网站(如外贸网站)的速度测试</li><li>提供网页连接时间、首字节时间、总时间等数据</li></ul></li><li><a href="https://www.dotcom-tools.com/website-speed-test.aspx"><strong>Dotcom-Tools Website Speed Test</strong></a> <em>(国外网站)</em><ul><li>20+个全球监测点, 适用于<strong>全球</strong>各地访问网站(如外贸网站)的速度测试</li><li>提供两次(首次及重复访问)网页加载速度，且可按节点查看详细信息</li></ul></li></ul><h2 id="测试及分析网站速度性能"><a href="#测试及分析网站速度性能" class="headerlink" title="测试及分析网站速度性能"></a>测试及分析网站速度性能</h2><p>网站性能测试工具&#x2F;网站，有的同样可以测试<strong>本地</strong>或<strong>单个监测点</strong>访问网站的速度，但其主要作用，是对网站进行全方位的代码及部署检测，根据一定规则给出评分以及相关的优化建议。</p><ul><li><a href="http://yslow.org/"><strong>YSlow</strong></a> <em>(浏览器插件)</em><ul><li>Yahoo根据官方团队总结的23条影响网站速度的指标所提供的网站性能检测插件</li><li>统计页面各方面性能指标，并根据YSlow或用户自定义的规则给出评分以及具体优化建议</li><li>支持 Firefox, Chrome, Safari, Opera 等内核的浏览器</li><li>这是个浏览器插件，对相应网页的分析是基于本地的访问</li></ul></li><li><a href="https://developers.google.com/speed/pagespeed/insights/"><strong>PageSpeed Insights</strong></a> <em>(Google在线工具&#x2F;墙外)</em><ul><li>PageSpeed Insights是Google的网页性能优化工具之一，与YSlow类似</li><li>移动端与PC端分别给出分析报告及优化建议</li><li>PageSpeed Insights服务是在线提供的(是个网页)</li></ul></li><li><a href="https://gtmetrix.com/"><strong>GTmetrix</strong></a> <em>(国外网站)</em><ul><li>GTmetrix算是YSlow+PageSpeed Insights的加强版，分别给出两者的评分及分析报告</li><li>7个国外监测点(不可自选)</li><li>同时还会提供页面加载Waterfall和速度信息</li><li>会按网址保存历史测速信息并随时对比、查看、下载</li></ul></li><li><a href="https://www.pingdom.com/"><strong>Pingdom</strong></a> <em>(国外网站)</em><ul><li>与GTmetrix类似，页面性能评分及建议基于PageSpeed</li><li>4个国外监测点(可自选)</li></ul></li><li><a href="http://www.webpagetest.org/"><strong>WebPageTest</strong></a> <em>(国外网站)</em><ul><li>根据地区及<strong>设备</strong>细分，全球拥有近百个监测点(包括中国)</li><li>遗憾的是只能进行单点测速，有Waterfall及速度指标，但没有相关评分及优化建议。</li></ul></li></ul><h2 id="追踪真实访客的访问速度"><a href="#追踪真实访客的访问速度" class="headerlink" title="追踪真实访客的访问速度"></a>追踪真实访客的访问速度</h2><p>无论是对网站进行多地测速，还是进行性能分析，往往是在服务器&#x2F;CDN选择以及网站代码优化的层面提供参考。在网站部署、代码优化完成并上线后，我们会面临一个灵魂拷问：</p><p><strong>散落在世界各地的访客，访问我的网站速度到底是怎样的？</strong></p><p>追踪并拆解分析网站真实访客的访问速度，然后进行针对性的优化，是网站速度优化中必不可少的环节。</p><ul><li><a href="https://analytics.google.com/"><strong>Google Analytics(GA)</strong></a><ul><li>网站速度分析是GA的内置功能，使用GA作为网站统计工具的话，没有额外的部署成本。</li><li>追踪的维度全面：服务器连接时间、服务器响应时间、网页加载时间、网页下载时间、域名查询时间、重定向时间等。</li><li>与GA其它访客数据深度集成。比如：从国家、浏览器或网站页面等不同维度拆解访客的访问速度。</li><li>GA网站速度追踪是<strong>抽样</strong>数据，普通玩家根据自己的观察抽样率在1%左右：同期1万个访客，会有约100份采样数据。</li></ul></li></ul><p><img data-src="/341/1218183556.png" alt="Google Analytics网站速度分析" loading="lazy"></p><p>如果网站的访客数量以GA约1%的采样率不足以支持有效的速度分析的话，可以尝试去寻找其他统计工具方案，或是自主开发相关的功能。不过话说回来，这种情况下是不是有必要追踪真实访客的访问速度也值得商榷了。</p><p>对于站长来说，网站速度一直是许多人非常关心的问题，网页加载速度对于用户体验有着很大的影响，如何更全面的了解自己网站的加载速度呢？本文中我们来推荐几款好用的网站测速工具，帮你快速了解网站的性能与速度</p><h2 id="PageSpeed-Insights"><a href="#PageSpeed-Insights" class="headerlink" title="PageSpeed Insights"></a>PageSpeed Insights</h2><p><img data-src="https://www.v1tx.com/wp-content/uploads/2020/05/20200506083757-1024x401.jpg" alt="谷歌网站测速工具PageSpeed Insights" loading="lazy"></p><p><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXJzLmdvb2dsZS5jb20vc3BlZWQvcGFnZXNwZWVkL2luc2lnaHRzLw==">PageSpeed Insights<i class="fa fa-external-link-alt"></i></span> 是Google推出的一款免费网站测速工具，它可以分别测试你的网站在移动设备和桌面设备上的加载速度，PageSpeed Insights 给出的测速数据并不是很多，但是它的优化建议功能非常实用，它会直接告诉你应该优化哪些地方，比如移除阻塞渲染的资源，它会显示哪个js文件阻止了渲染，减少文件请求等</p><p>另外还有一个值得关注的地方就是它的实验室数据，它可以显示你的网站进入不同状态的具体时间，比如首次内容绘制时间、首次有效绘制时间、可交互前的耗时、首次输入延迟最长预估值等，还可以查看到网页加载过程中的截图</p><p><img data-src="https://www.v1tx.com/wp-content/uploads/2020/05/20200506084523.jpg" alt="PageSpeed Insights 实验室数据" loading="lazy"></p><h2 id="GTmetrix"><a href="#GTmetrix" class="headerlink" title="GTmetrix"></a>GTmetrix</h2><p><img data-src="https://www.v1tx.com/wp-content/uploads/2020/05/20200506081928-1024x584.jpg" alt="专业网站测速工具GTmetrix" loading="lazy"></p><p><span class="exturl" data-url="aHR0cHM6Ly9ndG1ldHJpeC5jb20v">GTmetrix <i class="fa fa-external-link-alt"></i></span>是一款非常专业的网站测速工具，在测速之前，我们就可以设置很多选项(需要登陆，建议注册账号使用)，比如测试服务器的位置、测试浏览器、网速模拟、HTTP登陆验证等，可以用它测试很多不同的使用场景</p><p>在测试完成后，GTmetrix 还会给出非常详细的报告，包括</p><ul><li>页面速度，比如缓存、页面渲染、代码图片的压缩等</li><li>YSlow分析得分，也是值得参考的报告</li><li>页面加载瀑布流，页面元素的加载流程以及资源消耗</li><li>页面加载时间线，首次页面加载、Dom加载等的具体时间</li><li>视频回放，可以查看页面加载的视频</li><li>历史数据分析，如果你对同一页面做多次测试的话可以查看历史分析，以图表的形式展示了速度的变化</li></ul><p>GTmetrix 是一款非常强大的网页测速工具，里面有很多专业的工具，如果你正在优化自己的网站速度，一定要试试这款工具</p><h2 id="Pingdom-测速工具"><a href="#Pingdom-测速工具" class="headerlink" title="Pingdom 测速工具"></a>Pingdom 测速工具</h2><p><img data-src="https://www.v1tx.com/wp-content/uploads/2020/05/20200506080916-1024x468.jpg" alt="Pingdom 网站测速工具" loading="lazy"></p><p><span class="exturl" data-url="aHR0cHM6Ly90b29scy5waW5nZG9tLmNvbS8=">Pingdom测速工具<i class="fa fa-external-link-alt"></i></span> 是一个非常简洁而且漂亮的网站测速工具，它提供了包括日本东京、德国法兰克福、英国伦敦、美国华盛顿、美国旧金山、澳大利亚悉尼、巴西圣保罗等7个不同地区的测速点，你在其中选择最适合自己网站的服务器</p><p>在测速完毕后，Pingdom 会根据网页的页面大小、加载时间、请求数量等给出一个页面性能得分，性能得分越高，证明网站优化得越好，速度也就越快</p><p>如果你想要查看更详细的信息，还可以继续查看下面的报告，其提供的数据包括</p><ul><li>页面各种类型文件的大小，比如各种脚本、图片、字体、代码等的大小</li><li>页面各种类型文件的请求数量，包括JS、图片、CSS、XHR、HTML等</li><li>不同域名加载内容的数量和大小，可以查看到一些第三方资源</li><li>页面文件的加载时间和序列，详细的加载流程</li></ul><p>通过这些详细信息，网站管理者可以轻松了解到哪些地方阻塞了网站的加载，然后针对性的优化</p><p>Pingdom 是一款非常好用的网站速度测试工具，即能快速测试出网站的速度分数，又能详细分析页面的性能，不管是新手还是专业人员，都非常推荐使用</p><h2 id="WebPageTest"><a href="#WebPageTest" class="headerlink" title="WebPageTest"></a>WebPageTest</h2><p><img data-src="https://www.v1tx.com/wp-content/uploads/2020/05/20200506085900-1024x532.jpg" alt="免费网站测速工具WebPageTest" loading="lazy"></p><p><span class="exturl" data-url="aHR0cHM6Ly93d3cud2VicGFnZXRlc3Qub3JnLw==">WebPageTest<i class="fa fa-external-link-alt"></i></span> 是一款免费的网站速度测试工具，它有非常多的数据点，可以测试你的网站在全球的加载速度，你还可以选择不同的浏览器、设备进行测试。当输入网站测速后，WebPageTest 会进行3次测试，你可以参考这些不同的加载时间，也可以点击进入详细的报告页面，报告里面包含了瀑布流、请求详情、内容分析、域名分析等页面，可以用来分析网站</p><h2 id="Sucuri-Load-Time-Tester"><a href="#Sucuri-Load-Time-Tester" class="headerlink" title="Sucuri Load Time Tester"></a>Sucuri Load Time Tester</h2><p><img data-src="https://www.v1tx.com/wp-content/uploads/2020/05/20200506091402-1024x457.jpg" alt="全球网速测试工具Sucuri Load Time Tester" loading="lazy"></p><p><span class="exturl" data-url="aHR0cHM6Ly9wZXJmb3JtYW5jZS5zdWN1cmkubmV0Lw==">Sucuri Load Time Tester<i class="fa fa-external-link-alt"></i></span> 是由Sucuri推出的一个网站测速工具，和上面提到的几款工具不同，它是从多个地区的服务器同时发出请求，测试网站的加载速度，它不提供任何的分析功能，但是优点在于可以快速测试多个地区的加载，更适合只是测试网站速度的人使用</p><h2 id="17CE"><a href="#17CE" class="headerlink" title="17CE"></a>17CE</h2><p><img data-src="https://www.v1tx.com/wp-content/uploads/2020/05/20200506091055-1024x391.jpg" alt="国内网站测速工具17CE" loading="lazy"></p><p><span class="exturl" data-url="aHR0cHM6Ly93d3cuMTdjZS5jb20v">17CE<i class="fa fa-external-link-alt"></i></span> 是一款国内的网站测速工具，它的功能类似于Sucuri Load Time Tester，只不过它的测试区域换成了国内各个地区，比如你可以测试北京、上海、广东的网站加载速度，更适合面向国内的站点使用，17CE 还提供了一个可视化的地图图表，可以非常清除的看到你的网站在国内各省市的加载速度</p><p>以上就是我们推荐的几款网站测速工具，每个产品都有自己的功能与特色，可以对比或配合使用</p><p>网站的打开速度直接影响用户体验，据悉，网站若没有在4秒内读取出来，大多数的访客就会选择离开，而且网页的载入速度也会影响网站的排名，因此，网站的打开速度极其重要。根据不同的需求去分析网站的加载速度，有助于促进网站高效运行。</p><p>\1. <span class="exturl" data-url="aHR0cDovL3Rvb2xzLnBpbmdkb20uY29tL2ZwdC8=">Pingdom Website Speed Test<i class="fa fa-external-link-alt"></i></span></p><p>Pingdom是一个免费的网站速度测试工作，不仅是看起来非常棒，而且尽可能多的呈现出你的网站的各方面信息。它可测试网站加载速度，对页面和大小进行分析。测试完成后会得到一份非常详细的测试报告，包括图片、CSS等，帮助用户找出影响网站速度的原因，并给出改善网页性能的可行性方案，对于有网站的用户来说非常实用。工具地址：<span class="exturl" data-url="aHR0cHM6Ly90b29scy5waW5nZG9tLmNvbS8=">https://tools.pingdom.com/<i class="fa fa-external-link-alt"></i></span></p><p>下图是根据Ueeshop的一个案例网站的测试，他们主营产品包装，用的是外国的服务器。图为截屏的一部分，下拉会有跟多关于网站测试的详细信息。</p><p>2.Webpagetes</p><p>Webpagetest原本是由AOL开发内部使用的工具，后来在Google Code上开源，是一款非常优秀的网页前端性能测试工具。不仅可以测试个个国家访问特定网站的加载时间，还可以测试不同的浏览器以及不同手机系统（IOS&#x2F;Android）所花费的时间。工具地址：<span class="exturl" data-url="aHR0cDovL3d3dy53ZWJwYWdldGVzdC5vcmcv">http://www.webpagetest.org/<i class="fa fa-external-link-alt"></i></span></p><p>它的排版看起来会比较密集，信息量很大，需要花点时间去整理信息。测试的结果会压缩成一个小截图，点开就能看到清晰的大图，如下图。</p><p>3.PageSpeed Insigts</p><p>这是Google一款测速工具，用起来很方便。它有中文页面，结果会直接总结出测试的网站所存在的问题，还有优化的建议，指示很清晰。PageSpeed的分析基于浏览器缓存、服务器响应时间、图片等。</p><p>工具地址：<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXJzLmdvb2dsZS5jb20v">https://developers.google.com<i class="fa fa-external-link-alt"></i></span></p><p>4.Sucuri Load Time Tester</p><p>这款工具也非常好用，可以很值得直观地看出测试网站在不同国家的运行速度。它会根据网速的快慢用不同的颜色表示，绿色表示畅通，没有颜色的普通数字表示一般，黄色表示中等偏慢，红色表示缓慢。值得注意的是，因为不同网站挂靠不同地区的服务器，不可能在每个国家都能打开。但下图的网站做得不错，得分都A。</p><p>工具地址：<span class="exturl" data-url="aHR0cHM6Ly9wZXJmb3JtYW5jZS5zdWN1cmkubmV0Lw==">https://performance.sucuri.net/<i class="fa fa-external-link-alt"></i></span></p><p>为了作出对比，我们还测试了其它的页面，下面是日本的一个品牌网站，得分为B，可以看到很多的黄色和红色，对比较为明显。</p>]]></content>
    
    
    <summary type="html">默认</summary>
    
    
    
    
  </entry>
  
</feed>
